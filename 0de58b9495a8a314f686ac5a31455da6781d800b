{
  "comments": [
    {
      "key": {
        "uuid": "4af9f126_0066ec7b",
        "filename": "lib/nvmf/tcp.c",
        "patchSetId": 5
      },
      "lineNbr": 2549,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-10-23T22:52:40Z",
      "side": 1,
      "message": "Note: this patch fixes a real problem that I found while working on the Seastar sock implementation.  We don\u0027t have a CI test yet that hits this same problem, but the problem is not limited to Seastar.",
      "revId": "0de58b9495a8a314f686ac5a31455da6781d800b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32c88e49_c6c319ac",
        "filename": "lib/nvmf/tcp.c",
        "patchSetId": 5
      },
      "lineNbr": 2549,
      "author": {
        "id": 1011275
      },
      "writtenOn": "2019-10-23T23:07:52Z",
      "side": 1,
      "message": "For long term solution if we want to support zero copy API per Shuhei\u0027s purpose: \n\nI suggest the following code in spdk_nvmf_tcp_poll_group_poll function, and Jim\u0027s approach can also work. But we do want to make it too confused with if else. \n \nTAILQ_FOREACH_SAFE(tqpair, \u0026tgroup-\u003eqpairs, link, tqpair_tmp) {\n\t\t\tif (spdk_unlikely(tqpair-\u003epdu_recv_buf.remain_size)) {\n\t\t\t\tspdk_nvmf_tcp_sock_cb(tqpair, NULL, tqpair-\u003esock);\n\t\t\t}\n\t\t}",
      "parentUuid": "4af9f126_0066ec7b",
      "revId": "0de58b9495a8a314f686ac5a31455da6781d800b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87d70eae_6663b66c",
        "filename": "lib/nvmf/tcp.c",
        "patchSetId": 5
      },
      "lineNbr": 2549,
      "author": {
        "id": 1011275
      },
      "writtenOn": "2019-10-23T23:39:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "32c88e49_c6c319ac",
      "revId": "0de58b9495a8a314f686ac5a31455da6781d800b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a448372c_091f3dcd",
        "filename": "lib/nvmf/tcp.c",
        "patchSetId": 5
      },
      "lineNbr": 2576,
      "author": {
        "id": 1011275
      },
      "writtenOn": "2019-10-23T23:39:23Z",
      "side": 1,
      "message": "I do not agree with this.\nFor the incapsule data, it can not be in the first of queue, we should just use:\nSTAILQ_REMOVE(\u0026group-\u003epending_buf_queue, buf_link);",
      "range": {
        "startLine": 2574,
        "startChar": 3,
        "endLine": 2576,
        "endChar": 4
      },
      "revId": "0de58b9495a8a314f686ac5a31455da6781d800b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}