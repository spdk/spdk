{
  "comments": [
    {
      "key": {
        "uuid": "953cebac_7c649a3e",
        "filename": "lib/nvmf/tcp.c",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1011275
      },
      "writtenOn": "2020-01-13T02:58:06Z",
      "side": 0,
      "message": "Not related change, the target can choose to send may c2h pdus.",
      "range": {
        "startLine": 57,
        "startChar": 1,
        "endLine": 57,
        "endChar": 93
      },
      "revId": "14b90a8bba4f7c0a63b1fa67e151a3778979e24a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09b2210b_7a162b13",
        "filename": "lib/nvmf/tcp.c",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2020-01-13T17:58:33Z",
      "side": 0,
      "message": "A target may, but at least in the default configuration for the tcp transport, our target does not. And because this is hard coded to 64 instead of calculated from the io_unit_size and the max_io_size, choosing values for those that may require the target to send multiple c2h pdus is broken. I\u0027m simplifying it to assume they\u0027re equal here, which is no more broken than before. In the next patch I then guarantee they\u0027re equal.",
      "parentUuid": "953cebac_7c649a3e",
      "range": {
        "startLine": 57,
        "startChar": 1,
        "endLine": 57,
        "endChar": 93
      },
      "revId": "14b90a8bba4f7c0a63b1fa67e151a3778979e24a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e400150b_55d83547",
        "filename": "lib/nvmf/tcp.c",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1011275
      },
      "writtenOn": "2020-01-14T02:01:20Z",
      "side": 0,
      "message": "Hi Ben, \n\nFor C2H pdu 64, we can use a configurable variable. The C2h pdu is used to restrict the C2h PDU usage, if there are multiple C2h pdus. And additionally, we guarantee that the all the pdus can be allocated. Otherwise, we will face the issue that the the pdu cannot allocated. So this is why in the design and implementation, we set the number of PDUs in the beginning.\n\nYes, multiple C2H pdu support is also a feature described in the spec. I think that we should keep it.",
      "parentUuid": "09b2210b_7a162b13",
      "range": {
        "startLine": 57,
        "startChar": 1,
        "endLine": 57,
        "endChar": 93
      },
      "revId": "14b90a8bba4f7c0a63b1fa67e151a3778979e24a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95cb6c2b_8e4ec9bd",
        "filename": "lib/nvmf/tcp.c",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2020-01-16T18:14:44Z",
      "side": 0,
      "message": "Making the C2H PDU count configurable doesn\u0027t help. It needs to be calculated. But in the commit message here I\u0027ve outlined why I don\u0027t think our target needs to support any ratio of request to C2H other than 1:1.",
      "parentUuid": "e400150b_55d83547",
      "range": {
        "startLine": 57,
        "startChar": 1,
        "endLine": 57,
        "endChar": 93
      },
      "revId": "14b90a8bba4f7c0a63b1fa67e151a3778979e24a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}