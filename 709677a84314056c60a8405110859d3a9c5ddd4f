{
  "comments": [
    {
      "key": {
        "uuid": "31402a45_00d0e517",
        "filename": "test/nvme/overhead/overhead.c",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1011314
      },
      "writtenOn": "2019-07-18T22:44:02Z",
      "side": 1,
      "message": "How does uring play with aio? Does enabling uring require disabling aio? Or can we have have both enabled and choose at runtime if to use uring/aio?",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 52,
        "endChar": 6
      },
      "revId": "709677a84314056c60a8405110859d3a9c5ddd4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "718d9e0f_d67d1e88",
        "filename": "test/nvme/overhead/overhead.c",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-07-19T00:17:46Z",
      "side": 1,
      "message": "Yes, my comments to use switch-case for type \u003d NVME_NS, AIO, or IO_URING were very unclear but intended to what John says.",
      "parentUuid": "31402a45_00d0e517",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 52,
        "endChar": 6
      },
      "revId": "709677a84314056c60a8405110859d3a9c5ddd4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fb67d6c_ced04fcf",
        "filename": "test/nvme/overhead/overhead.c",
        "patchSetId": 3
      },
      "lineNbr": 87,
      "author": {
        "id": 1011314
      },
      "writtenOn": "2019-07-18T22:44:02Z",
      "side": 1,
      "message": "I would re-order these 2 so that the fd is first just like for aio above, followed by struct io_uring. One of the key learnings from the work done to optimize our NVMe driver is organizing data into hot and cold path cache lines improves performance. I think the fd field is a lot hotter than some of the fields I see in the io_uring that look like placeholders for future expansion of uring beyond block I/O. \nAssuming that the overhead tool is already analyzed with pahole and optimized I would suggest following the order for libaio so that the fd is in the first cache line just like in the libaio case.",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 87,
        "endChar": 13
      },
      "revId": "709677a84314056c60a8405110859d3a9c5ddd4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b3c5d15_33b8e1c4",
        "filename": "test/nvme/overhead/overhead.c",
        "patchSetId": 3
      },
      "lineNbr": 116,
      "author": {
        "id": 1011314
      },
      "writtenOn": "2019-07-18T22:44:02Z",
      "side": 1,
      "message": "Should this flag be set to a default value of true? If I understand this correctly, doesn\u0027t using fixedbufs give us the best performance because it pre-allocates I/O buffers? Or am I mixing this setting up with a different discussion we had about pre-allocating I/O buffers?",
      "range": {
        "startLine": 116,
        "startChar": 12,
        "endLine": 116,
        "endChar": 39
      },
      "revId": "709677a84314056c60a8405110859d3a9c5ddd4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44260ff9_4ebebbfd",
        "filename": "test/nvme/overhead/overhead.c",
        "patchSetId": 3
      },
      "lineNbr": 216,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-07-17T08:32:41Z",
      "side": 1,
      "message": "So sorry, my idea was bad. Will you restore your idea and separate register_aio_file() and register_io_uring_file()?",
      "range": {
        "startLine": 216,
        "startChar": 0,
        "endLine": 216,
        "endChar": 26
      },
      "revId": "709677a84314056c60a8405110859d3a9c5ddd4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b56072e_7168ccd9",
        "filename": "test/nvme/overhead/overhead.c",
        "patchSetId": 3
      },
      "lineNbr": 399,
      "author": {
        "id": 1011314
      },
      "writtenOn": "2019-07-18T22:44:02Z",
      "side": 1,
      "message": "I/O size is hard-coded to 4096 instead of using g_io_size_bytes.",
      "range": {
        "startLine": 399,
        "startChar": 35,
        "endLine": 399,
        "endChar": 39
      },
      "revId": "709677a84314056c60a8405110859d3a9c5ddd4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "975b857c_29431356",
        "filename": "test/nvme/overhead/overhead.c",
        "patchSetId": 3
      },
      "lineNbr": 417,
      "author": {
        "id": 1011314
      },
      "writtenOn": "2019-07-18T22:44:02Z",
      "side": 1,
      "message": "Use descriptive name like tsc_before_io_submit",
      "range": {
        "startLine": 417,
        "startChar": 10,
        "endLine": 417,
        "endChar": 15
      },
      "revId": "709677a84314056c60a8405110859d3a9c5ddd4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c1f8654_2bf71028",
        "filename": "test/nvme/overhead/overhead.c",
        "patchSetId": 3
      },
      "lineNbr": 439,
      "author": {
        "id": 1011314
      },
      "writtenOn": "2019-07-18T22:44:02Z",
      "side": 1,
      "message": "Should these be set to_submit and to_complete? What does setting to_complete\u003d0 do? If I understand this param, it causes the kernel to block till at least that many I/Os are complete. So are setting this to zero so that the overhead tool does not block, but use the io_uring_reap to poll for completions?",
      "range": {
        "startLine": 439,
        "startChar": 38,
        "endLine": 439,
        "endChar": 42
      },
      "revId": "709677a84314056c60a8405110859d3a9c5ddd4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0ef44c6_4a41e09e",
        "filename": "test/nvme/overhead/overhead.c",
        "patchSetId": 3
      },
      "lineNbr": 472,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-07-17T08:32:41Z",
      "side": 1,
      "message": "Could we change to the following? I hope this is simpler.\n\nstatic void\nsubmit_single_io(void)\n{\n\tswitch (entry-\u003etype) {\n\tcase ENTRY_TYPE_NVME_NS:\n\t\trc \u003d spdk_nvme_ns_cmd_read();\n\t\tbreak;\n#if HAVE_LIBURING:\n\tcase ENTRY_TYPE_AIO_FILE:\n\t\trc \u003d aio_submit();\n\t\tbreak;\n#endif\n#if HAVE_LIBURING:\n\tcase ENTRY_TYPE_IO_URING_FILE:\n\t\trc \u003d io_uring_submit_single();\n\t\tbreak;\n#endif\n\tdefault:\n\t\tbreak;\n\t}\n}",
      "revId": "709677a84314056c60a8405110859d3a9c5ddd4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e677f15_e4ebe5d3",
        "filename": "test/nvme/overhead/overhead.c",
        "patchSetId": 3
      },
      "lineNbr": 525,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-07-17T08:32:41Z",
      "side": 1,
      "message": "ditto.\n\nstatic uint64_t\ncheck_io(void)\n{\n\tswitch (entry-\u003etype) {\n\tcase ENTRY_TYPE_NVME_NS:\n\t\tspdk_nvme_qpair_process_completions();\n\t\tbreak;\n#if HAVE_LIBAIO\n\tcase ENTRY_TYPE_AIO_FILE:\n\t\taio_check_io();\n\t\tbreak;\n#endif\n#if HAVE_LIBURING\n\tcase ENTRY_TYPE_IO_URING_FILE:\n\t\tio_uring_check_io();\n\t\tbreak;\n#endif\n\tdefault:\n\t\tbreak;\n\t}\n}",
      "revId": "709677a84314056c60a8405110859d3a9c5ddd4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96e1c26c_1968287a",
        "filename": "test/nvme/overhead/overhead.c",
        "patchSetId": 3
      },
      "lineNbr": 588,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-07-17T08:32:41Z",
      "side": 1,
      "message": "ditto.\n\nstatic int\ninit_ns_worker_ctx(void)\n{\n\tswitch (g_ns-\u003etype) {\n#if HAVE_LIBAIO\n\tcase ENTRY_TYPE_AIO_FILE:\n\t\tg_ns-\u003eu.aio.events \u003d calloc();\n\t\tg_ns-\u003eu.aio.ctx \u003d 0;\n\t\tio_setup(1, \u0026g_ns-\u003eu.aio.ctx);\n\t\tbreak;\n#endif\n#if HAVE_LIBURING:\n\tcase ENTRY_TYPE_IO_URING_FILE:\n\t{\n\t\tstruct io_uring *ring \u003d \u0026g_ns-\u003eu.uring.uring;\n\t\tg_ns-\u003eio_penging \u003d 0;\n\t\tg_ns-\u003eio_inflight \u003d 0;\n\t\tio_uring_queue_init(1, ring, IORING_SETUP_IOPOLL);\n\t\tbreak;\n\t}\n#endif\n\tcase ENTRY_TYPE_NVME_NS:\n\t\tg_ns-\u003eu.nvme.qpair \u003d spdk_nvme_ctrlr_alloc_io_qpair();\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n}",
      "revId": "709677a84314056c60a8405110859d3a9c5ddd4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97f5f709_dee4a7b7",
        "filename": "test/nvme/overhead/overhead.c",
        "patchSetId": 3
      },
      "lineNbr": 609,
      "author": {
        "id": 1011314
      },
      "writtenOn": "2019-07-18T22:44:02Z",
      "side": 1,
      "message": "Let\u0027s make this \"io_uring_queue_init\" to make it easier to trace the error.",
      "range": {
        "startLine": 609,
        "startChar": 20,
        "endLine": 609,
        "endChar": 30
      },
      "revId": "709677a84314056c60a8405110859d3a9c5ddd4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e697e5c1_836dc231",
        "filename": "test/nvme/overhead/overhead.c",
        "patchSetId": 3
      },
      "lineNbr": 632,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-07-17T08:32:41Z",
      "side": 1,
      "message": "ditto\n\nstatic void\ncleanup_ns_worker_ctx(void)\n{\n\tswitch (g_ns-\u003etype) {\n#if HAVE_LIBAIO\n\tcase ENTRY_TYPE_AIO_FILE:\n\t\tio_destroy(g_ns-\u003eu.aio.ctx);\n\t\tfree(g_ns-\u003eu.aio.events);\n\t\tbreak;\n#endif\n#if HAVE_LIBURING\n\tcase ENTRY_TYPE_IO_URING_FILE:\n\t\tclose(g_ns-\u003eu.uring.uring.ring_fd);\n\t\tio_uring_queue_exit(\u0026g_ns-\u003eu.uring.uring);\n\t\tfree(g_task-\u003eiov);\n\t\tif (g_enable_fixedbufs) {\n\t\t\tfree(g_fixedbuf_iov);\n\t\t}\n\t\tbreak;\n#endif\n\tcase ENTRY_TYPE_NVME_NS:\n\t\tspdk_nvme_ctrlr_free_io_qpair(g_ns-\u003eu.nvme.qpair);\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n}",
      "revId": "709677a84314056c60a8405110859d3a9c5ddd4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25a66b4a_93c735db",
        "filename": "test/nvme/overhead/overhead.c",
        "patchSetId": 3
      },
      "lineNbr": 804,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-07-17T08:32:41Z",
      "side": 1,
      "message": "could we change this to the option -p?\nI think we can enable both AIO and URING but we want to use only either one in a run.",
      "range": {
        "startLine": 804,
        "startChar": 1,
        "endLine": 804,
        "endChar": 23
      },
      "revId": "709677a84314056c60a8405110859d3a9c5ddd4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7149850_46e8af5e",
        "filename": "test/nvme/overhead/overhead.c",
        "patchSetId": 3
      },
      "lineNbr": 906,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-07-17T08:32:41Z",
      "side": 1,
      "message": "Please revert this change.",
      "range": {
        "startLine": 906,
        "startChar": 31,
        "endLine": 906,
        "endChar": 48
      },
      "revId": "709677a84314056c60a8405110859d3a9c5ddd4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4603cf99_b2fbce1f",
        "filename": "test/nvme/overhead/overhead.c",
        "patchSetId": 3
      },
      "lineNbr": 912,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-07-17T08:32:41Z",
      "side": 1,
      "message": "The following depends on my comment at the line 804.",
      "revId": "709677a84314056c60a8405110859d3a9c5ddd4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}