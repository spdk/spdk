{
  "comments": [
    {
      "key": {
        "uuid": "5ac60a1d_2474a5a1",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 1842,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2019-11-18T18:23:35Z",
      "side": 1,
      "message": "Remove extra whitespace change",
      "revId": "04d7a217fee3254aea43a6842ea26b86f355a992",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70d95e8c_9a19216c",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 1842,
      "author": {
        "id": 1015333
      },
      "writtenOn": "2019-11-19T06:16:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5ac60a1d_2474a5a1",
      "revId": "04d7a217fee3254aea43a6842ea26b86f355a992",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4c3f8cd_ba7f5cab",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 1878,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2019-11-18T18:23:35Z",
      "side": 1,
      "message": "Have you measured the performance impact here? At a minimum I think you can get away with an STAILQ instead.",
      "revId": "04d7a217fee3254aea43a6842ea26b86f355a992",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a8d9853_f121f73a",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 1878,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-11-18T21:49:34Z",
      "side": 1,
      "message": "Agree - an STAILQ should suffice.",
      "parentUuid": "b4c3f8cd_ba7f5cab",
      "revId": "04d7a217fee3254aea43a6842ea26b86f355a992",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "669d6a88_11944ea1",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 1878,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-11-19T00:01:29Z",
      "side": 1,
      "message": "No - this has to be a TAILQ.  STAILQ has O(n) removal, and IO will be completed out of order.\n\nThis will add some overhead, but I think there are other places where we\u0027re going to need this eventually.  A couple of examples come to mind:\n\n1) spdk_bdev_abort_io() - the idea where user passes the cb_arg related to some previously submitted IO, then we can search the io_submitted list, find the matching bdev_io and tell the bdev module to abort it\n2) smarter bdev resets - somewhat related to the timeout concept here, don\u0027t immediately pass the reset to the underlying bdev module, only do it if there is actually some I/O that has been outstanding for a long period of time (it\u0027s a bit more complicated than that but you get the idea)",
      "parentUuid": "2a8d9853_f121f73a",
      "revId": "04d7a217fee3254aea43a6842ea26b86f355a992",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3dd0b265_c0ec5dfe",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 1880,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2019-11-18T18:23:35Z",
      "side": 1,
      "message": "What happens if a virtual bdev passes a bdev_io down to the layer below it? It\u0027s going to end up queued twice.",
      "revId": "04d7a217fee3254aea43a6842ea26b86f355a992",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5fa565d_e7e2c5cf",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 1880,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-11-18T21:49:34Z",
      "side": 1,
      "message": "Ben - can you clarify this?  I don\u0027t understand how a bdev_io can get queued twice.  We always create a new bdev_io at each virtual bdev layer.",
      "parentUuid": "3dd0b265_c0ec5dfe",
      "revId": "04d7a217fee3254aea43a6842ea26b86f355a992",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1897d055_21489616",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 1880,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2019-11-18T23:04:08Z",
      "side": 1,
      "message": "I forgot we removed the ability for modules to directly pass bdev_io down a layer, so there\u0027s no problem with this part.",
      "parentUuid": "e5fa565d_e7e2c5cf",
      "revId": "04d7a217fee3254aea43a6842ea26b86f355a992",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}