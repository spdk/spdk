{
  "comments": [
    {
      "key": {
        "uuid": "cd2c4d81_9da2e0e7",
        "filename": "CHANGELOG.md",
        "patchSetId": 7
      },
      "lineNbr": 63,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-08-30T16:17:49Z",
      "side": 1,
      "message": "\"is existed\" \u003d\u003e \"exists\"",
      "revId": "fd770a9fbd85b390d3f84504d5e9f97e4d5805c2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7880ef94_5336c0bf",
        "filename": "doc/jsonrpc.md",
        "patchSetId": 7
      },
      "lineNbr": 5655,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-08-30T16:17:49Z",
      "side": 1,
      "message": "Let\u0027s just say:\n\nTrue if a blobfs exists on the bdev, False otherwise",
      "revId": "fd770a9fbd85b390d3f84504d5e9f97e4d5805c2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "633d5d44_53863d36",
        "filename": "lib/blobfs/blobfs_rpc.c",
        "patchSetId": 7
      },
      "lineNbr": 49,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-08-30T16:17:49Z",
      "side": 1,
      "message": "nbd device?  I don\u0027t think nbd applies to this RPC",
      "revId": "fd770a9fbd85b390d3f84504d5e9f97e4d5805c2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2ad4513_f43e4eaa",
        "filename": "lib/blobfs/blobfs_rpc.c",
        "patchSetId": 7
      },
      "lineNbr": 157,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-08-30T16:17:49Z",
      "side": 1,
      "message": "oh - seeing this code reminds me of some changes we need to make to spdk_bdev_create_bs_dev\n\nWe recently added spdk_bdev_open_ext().  This new open call does two new things:\n\n1) allows for different types of asynchronous event; spdk_bdev_open() only handled hotplug\n2) user provides bdev name, not the bdev itself; this avoids case where bdev is deleted after spdk_bdev_get_by_name but before spdk_bdev_create_bs_dev is called\n\nwe have another problem here though; Seth has been working hard on dependencies between libraries in SPDK; we recently created the \"module\" top level directory; nothing in \"lib\" should depend on anything in \"module\" - but this code is in lib, and spdk_bdev_create_bs_dev is in module; I\u0027m going to ask Seth to take a look and make a recommendation for how to rectify.  we may need to put these RPCs in some new module directory",
      "revId": "fd770a9fbd85b390d3f84504d5e9f97e4d5805c2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eeb17c87_70904db2",
        "filename": "lib/blobfs/blobfs_rpc.c",
        "patchSetId": 7
      },
      "lineNbr": 157,
      "author": {
        "id": 1011223
      },
      "writtenOn": "2019-09-10T17:52:22Z",
      "side": 1,
      "message": "Hi xiaodong, Like Jim mentioned, this creates a dependency between blobfs and the blob_bdev module. If you were to rebase on master, this would fail autotest because of mismatched dependencies.\nThere isn\u0027t a very clean way of fixing this dependency chain. We don\u0027t want to move blob_bdev inside of the blob or blobstore libraries because they should be able to exist independent of it. We also don\u0027t want to make blobfs depend directly or indirectly on the bdev library which making it depend on blob_bdev does.\n\nAfter talking with Jim, I think the best solution is to create a new directory / module under module/blobfs/blob_bdev_rpc (name can be updated). You can copy the Makefiles from the other directories for an example, then you will have to add a line to mk/spdk.lib_deps.mk with the new module\u0027s dependencies. You can find those dependencies by running test/make/check_so_deps.sh on top of your updated SPDK repo. It will spit them out in a readable format.\n\nI know it seems weird to create an entirely new library for just a couple of RPCs, but that is the only way we can keep the dependency chain clean.",
      "parentUuid": "b2ad4513_f43e4eaa",
      "revId": "fd770a9fbd85b390d3f84504d5e9f97e4d5805c2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5ab1d87_ab23ee0f",
        "filename": "scripts/rpc/blobfs.py",
        "patchSetId": 7
      },
      "lineNbr": 8,
      "author": {
        "id": 1011289
      },
      "writtenOn": "2019-09-11T02:03:16Z",
      "side": 1,
      "message": "you probably saw this but same comment as Jim made before on how to word this",
      "revId": "fd770a9fbd85b390d3f84504d5e9f97e4d5805c2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46ee1f76_739711c1",
        "filename": "scripts/rpc/blobfs.py",
        "patchSetId": 7
      },
      "lineNbr": 8,
      "author": {
        "id": 1011712
      },
      "writtenOn": "2019-09-12T07:58:20Z",
      "side": 1,
      "message": "Thanks for the reminder, Paul",
      "parentUuid": "a5ab1d87_ab23ee0f",
      "revId": "fd770a9fbd85b390d3f84504d5e9f97e4d5805c2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}