{
  "comments": [
    {
      "key": {
        "uuid": "a23cec49_c45aad65",
        "filename": "lib/blob/blobstore.c",
        "patchSetId": 3
      },
      "lineNbr": 1545,
      "author": {
        "id": 1011221
      },
      "writtenOn": "2018-07-13T13:15:47Z",
      "side": 1,
      "message": "Since we skip allocation of ctx-\u003ebuf, shouldn\u0027t we skip freeing it here as well ?",
      "range": {
        "startLine": 1545,
        "startChar": 1,
        "endLine": 1545,
        "endChar": 25
      },
      "revId": "b8154feacdfe75255d02549bdef806e02b513a8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c7324cb_43fc3727",
        "filename": "lib/blob/blobstore.c",
        "patchSetId": 3
      },
      "lineNbr": 1545,
      "author": {
        "id": 1013008
      },
      "writtenOn": "2018-07-13T13:57:07Z",
      "side": 1,
      "message": "When we do not allocate ctx-\u003ebuf its value is NULL. Is it unsafe to perform spdk_dma_free(NULL) avoiding additional checks? For free() function in C standard it\u0027s ok and free is ineffective for this case. I\u0027m just trying to not over-complicate the code.",
      "parentUuid": "a23cec49_c45aad65",
      "range": {
        "startLine": 1545,
        "startChar": 1,
        "endLine": 1545,
        "endChar": 25
      },
      "revId": "b8154feacdfe75255d02549bdef806e02b513a8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48fac663_9f7704ce",
        "filename": "lib/blob/blobstore.c",
        "patchSetId": 3
      },
      "lineNbr": 1660,
      "author": {
        "id": 1011221
      },
      "writtenOn": "2018-07-13T13:15:47Z",
      "side": 1,
      "message": "Since we skip allocation of ctx-\u003ebuf, shouldn\u0027t we skip freeing it here as well ?",
      "range": {
        "startLine": 1660,
        "startChar": 2,
        "endLine": 1660,
        "endChar": 26
      },
      "revId": "b8154feacdfe75255d02549bdef806e02b513a8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "974bb20e_c8924ed6",
        "filename": "lib/blob/blobstore.c",
        "patchSetId": 3
      },
      "lineNbr": 1673,
      "author": {
        "id": 1011221
      },
      "writtenOn": "2018-07-13T13:15:47Z",
      "side": 1,
      "message": "Since we skip allocation of ctx-\u003ebuf, shouldn\u0027t we skip freeing it here as well ?",
      "range": {
        "startLine": 1673,
        "startChar": 2,
        "endLine": 1673,
        "endChar": 26
      },
      "revId": "b8154feacdfe75255d02549bdef806e02b513a8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f54842e4_66a72382",
        "filename": "lib/blob/blobstore.c",
        "patchSetId": 3
      },
      "lineNbr": 1680,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-07-12T20:23:24Z",
      "side": 1,
      "message": "I think this TAILQ_INSERT_TAIL should also be moved so that it is only done when there is a backing blob.\n\nThis TAILQ_INSERT_TAIL is only needed to make sure we aren\u0027t allocating tons of cluster-sized buffers for copy on write operations - we should only have one of those at a time.  But if we aren\u0027t doing a copy-on-write, there\u0027s no reason to wait.\n\nThat also means that line 1621 should check for parent_id !\u003d SPDK_BLOBID_INVALID.  If this blob doesn\u0027t have a parent ID, but some other blob does and has a copy-on-write operation in progress, we should still continue with the operation instead of queueing it.",
      "revId": "b8154feacdfe75255d02549bdef806e02b513a8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b7ec405_bae20c40",
        "filename": "lib/blob/blobstore.c",
        "patchSetId": 3
      },
      "lineNbr": 1680,
      "author": {
        "id": 1013008
      },
      "writtenOn": "2018-07-13T12:24:06Z",
      "side": 1,
      "message": "I\u0027ve created new patch for it as a next step of improvement: https://review.gerrithub.io/c/spdk/spdk/+/419227",
      "parentUuid": "f54842e4_66a72382",
      "revId": "b8154feacdfe75255d02549bdef806e02b513a8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}