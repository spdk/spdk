{
  "comments": [
    {
      "key": {
        "uuid": "fcbbbc7a_a1f5143a",
        "filename": "lib/ftl/ftl_band.c",
        "patchSetId": 4
      },
      "lineNbr": 701,
      "author": {
        "id": 1011218
      },
      "writtenOn": "2019-07-10T14:27:12Z",
      "side": 1,
      "message": "do we need to provide this alignment? We\u0027re allocating specifically dma-able memory so it should be somewhat optimally aligned by default.",
      "range": {
        "startLine": 701,
        "startChar": 9,
        "endLine": 701,
        "endChar": 35
      },
      "revId": "110037c22189273223c8747b6303e51d210f89e6",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9276d685_33b404a9",
        "filename": "lib/ftl/ftl_band.c",
        "patchSetId": 4
      },
      "lineNbr": 701,
      "author": {
        "id": 1015368
      },
      "writtenOn": "2019-07-11T14:14:11Z",
      "side": 1,
      "message": "I think we could get rid of this allocation altogether and just use the memory retrieved from the pool.\n\nFor some of the other allocations (especially the write buffer) it makes sense to explicitly require the buffers to be aligned to cache line.",
      "parentUuid": "fcbbbc7a_a1f5143a",
      "range": {
        "startLine": 701,
        "startChar": 9,
        "endLine": 701,
        "endChar": 35
      },
      "revId": "110037c22189273223c8747b6303e51d210f89e6",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6039a874_455d24af",
        "filename": "lib/ftl/ftl_band.c",
        "patchSetId": 4
      },
      "lineNbr": 701,
      "author": {
        "id": 1015371
      },
      "writtenOn": "2019-07-16T11:18:27Z",
      "side": 1,
      "message": "Added in separate patch",
      "parentUuid": "9276d685_33b404a9",
      "range": {
        "startLine": 701,
        "startChar": 9,
        "endLine": 701,
        "endChar": 35
      },
      "revId": "110037c22189273223c8747b6303e51d210f89e6",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58033bb2_b544265e",
        "filename": "lib/ftl/ftl_band.c",
        "patchSetId": 4
      },
      "lineNbr": 701,
      "author": {
        "id": 1011218
      },
      "writtenOn": "2019-07-16T16:40:41Z",
      "side": 1,
      "message": "I\u0027m still not sure about spdk_get_cache_line_size function, but I noticed DPDK *always* allocates cacheline-aligned memory even though the documentation doesn\u0027t guarantee that. Could we just enforce cacheline alignment in SPDK? In spdk_malloc() implemention we could always pass spdk_min(align, RTE_CACHE_LINE_SIZE) to rte_malloc(). Then we could document this behavior and just rely on it here.\n\nGuys, Ben, any thoughts?",
      "parentUuid": "6039a874_455d24af",
      "range": {
        "startLine": 701,
        "startChar": 9,
        "endLine": 701,
        "endChar": 35
      },
      "revId": "110037c22189273223c8747b6303e51d210f89e6",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f563fc2e_3a454655",
        "filename": "lib/ftl/ftl_band.c",
        "patchSetId": 4
      },
      "lineNbr": 701,
      "author": {
        "id": 1015368
      },
      "writtenOn": "2019-07-17T06:05:28Z",
      "side": 1,
      "message": "Yeah, that makes sense and seems fine to me.",
      "parentUuid": "58033bb2_b544265e",
      "range": {
        "startLine": 701,
        "startChar": 9,
        "endLine": 701,
        "endChar": 35
      },
      "revId": "110037c22189273223c8747b6303e51d210f89e6",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f37f2354_ef81baed",
        "filename": "lib/ftl/ftl_band.c",
        "patchSetId": 4
      },
      "lineNbr": 701,
      "author": {
        "id": 1015371
      },
      "writtenOn": "2019-07-17T07:29:18Z",
      "side": 1,
      "message": "I\u0027ll add the change to the parent patch, but it feels a bit off for me. The documentation change would need to happen in the global env.h, so would this mean we want each environment implementation to guarantee being at least cache line sized? \nThe code here wants 64B alignment so it\u0027s not trashing the cache, not for hardware requirements so it feels like the usage in FTL could use the spdk_get_cache_line_size function (especially the allocation in rwb) in case of a change of environment. Or maybe all of the usage could just have explicit NVMe alignment requirements (like DWORD) and the fact that it\u0027s bumped to RTE_CACHE_LINE_SIZE in DPDK is just a side effect?",
      "parentUuid": "f563fc2e_3a454655",
      "range": {
        "startLine": 701,
        "startChar": 9,
        "endLine": 701,
        "endChar": 35
      },
      "revId": "110037c22189273223c8747b6303e51d210f89e6",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}