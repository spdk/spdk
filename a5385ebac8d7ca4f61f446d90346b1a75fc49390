{
  "comments": [
    {
      "key": {
        "uuid": "c1ec7893_47661033",
        "filename": "lib/iscsi/iscsi_subsystem.c",
        "patchSetId": 1
      },
      "lineNbr": 355,
      "author": {
        "id": 1010525
      },
      "writtenOn": "2018-03-20T18:06:15Z",
      "side": 1,
      "message": "Have you tested if this makes any difference?\n\nI believe that the env_dpdk implementation of spdk_mempool_create() will already choose to allocate on the current core\u0027s socket when SPDK_ENV_SOCKET_ID_ANY is passed as socket_id.\n\nspdk_mempool_create() calls rte_mempool_create(), which calls rte_memzone_reserve(), which does this:\n\n  if (socket_id \u003d\u003d SOCKET_ID_ANY)\n    socket \u003d malloc_get_numa_socket();\n  else\n    socket \u003d socket_id;\n\nAnd malloc_get_numa_socket() returns the value of rte_socket_id(), which returns the socket ID of the currently running core.\n\nAdditionally, rte_memzone_reserve() already automatically falls back to other sockets if not enough memory on the current socket is available when passed SOCKET_ID_ANY (regarding your comment below).",
      "revId": "a5385ebac8d7ca4f61f446d90346b1a75fc49390",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a2ca2b1_c40123b4",
        "filename": "lib/iscsi/iscsi_subsystem.c",
        "patchSetId": 1
      },
      "lineNbr": 355,
      "author": {
        "id": 1011207
      },
      "writtenOn": "2018-03-21T10:39:05Z",
      "side": 1,
      "message": "Yes. Looking through DPDK code, it worked as you described here. In this way, it seems that we can make changes to the mempool_create related APIs to not expose this socket parameter and always have the SOCKET_ID_ANY to let DPDK handle properly. Or we can still leave this parameter there and change other callings to these APIs with SOCKET_ID_ANY parameter. For example, below line 364.",
      "parentUuid": "c1ec7893_47661033",
      "revId": "a5385ebac8d7ca4f61f446d90346b1a75fc49390",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "709c59ea_da34333c",
        "filename": "lib/iscsi/iscsi_subsystem.c",
        "patchSetId": 1
      },
      "lineNbr": 358,
      "author": {
        "id": 1011207
      },
      "writtenOn": "2018-03-20T14:20:36Z",
      "side": 1,
      "message": "Maybe we can add the logic here to allocate from SOCKET_ID_ANY if failing to do so from associated socket before directly returning -1.",
      "range": {
        "startLine": 358,
        "startChar": 2,
        "endLine": 358,
        "endChar": 12
      },
      "revId": "a5385ebac8d7ca4f61f446d90346b1a75fc49390",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eed36b0a_7d94eb35",
        "filename": "lib/iscsi/iscsi_subsystem.c",
        "patchSetId": 1
      },
      "lineNbr": 358,
      "author": {
        "id": 1011275
      },
      "writtenOn": "2018-03-30T06:19:04Z",
      "side": 1,
      "message": "Hi Gang,\n\nFor this patch, could we wrap it into env_dpdk lib. It means that if given ANY, we will allocate in the socket first, then if failed, we create by ANY to DPDK.",
      "parentUuid": "709c59ea_da34333c",
      "range": {
        "startLine": 358,
        "startChar": 2,
        "endLine": 358,
        "endChar": 12
      },
      "revId": "a5385ebac8d7ca4f61f446d90346b1a75fc49390",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}