{
  "comments": [
    {
      "key": {
        "uuid": "d7b50714_9f487c3c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-05-29T23:49:07Z",
      "side": 1,
      "message": "Hi Konrad,\n\nCould you add some text here explaining what this is needed for?  Specifically why spdk_mempool_create_ctor() would not work.\n\nThanks,\n\n-Jim",
      "revId": "e0cd22dfc6c5a95a4c28aad71f12bacc6f03f5f6",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "979df695_25f8d841",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1015368
      },
      "writtenOn": "2019-05-30T06:25:22Z",
      "side": 1,
      "message": "spdk_mempool_create_ctor only works when creating the mempool. After that, if you wanted to call a function on each element you\u0027d have to get them all, call the function and put them back. Wojtek Malikowski wanted to store objects on the pool that require freeing resources during deinitialization, so spdk_mempool_obj_iter would be very helpful for that purpose.\n\nIs there some reason we don\u0027t want to pull all the mempool definitions from DPDK? They seem quite useful.",
      "parentUuid": "d7b50714_9f487c3c",
      "revId": "e0cd22dfc6c5a95a4c28aad71f12bacc6f03f5f6",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bf1a5e5_3421eb16",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1011218
      },
      "writtenOn": "2019-05-30T09:39:49Z",
      "side": 1,
      "message": "We want to keep the env API at the very minimum. After all, there are already other (non-DPDK) env implementations that need to keep up.\n\nThe one we\u0027re introducing here, however, makes sense to me. It solves a basic problem - if we allocate some per-element memory in the create_ctor() callback, how do we free it?",
      "parentUuid": "979df695_25f8d841",
      "revId": "e0cd22dfc6c5a95a4c28aad71f12bacc6f03f5f6",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}