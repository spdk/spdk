{
  "comments": [
    {
      "key": {
        "uuid": "20f66d11_84128819",
        "filename": "lib/event/reactor.c",
        "patchSetId": 11
      },
      "lineNbr": 243,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2018-06-19T08:59:21Z",
      "side": 1,
      "message": "I think if this is called as update, the following looks popular and may prevent SPDK from the issue.\n\nlost \u003d 0;\npoller-\u003enext_run_tick +\u003d poller-\u003eperiod_ticks;\nwhile (poller-\u003enext_run_tick \u003c spdk_get_ticks()) {\n  lost++\n  poller-\u003enext_run_tick +\u003d poller-\u003eperiod_ticks;\n}",
      "revId": "02bffeb475813ace6efb0c162c7e25300ce30727",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52399d79_982c65b1",
        "filename": "lib/event/reactor.c",
        "patchSetId": 11
      },
      "lineNbr": 536,
      "author": {
        "id": 1011715
      },
      "writtenOn": "2018-06-17T22:07:38Z",
      "side": 1,
      "message": "I noticed having now \u003d spdk_get_ticks() here was causing performance drop up to 25%. It was coming from running context_switch_monitor timer poller running all the time. Looks like having now here caused timer poller execution to not function correctly as expected. in-lining it seem to solve it. I could take 2 variable approach as well, but thought in-lining is OK.",
      "revId": "02bffeb475813ace6efb0c162c7e25300ce30727",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6ecdbc7_0a1ba04d",
        "filename": "lib/event/reactor.c",
        "patchSetId": 11
      },
      "lineNbr": 536,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-06-18T23:13:18Z",
      "side": 1,
      "message": "Why does now \u003d spdk_get_ticks() cause a 25% performance drop though?  It can\u0027t just be saving it in a local variable.  It must be the updating \u0027now\u0027 here causes problems elsewhere.\n\nI\u0027d like to understand this more through before we proceed further on committing this patch.",
      "parentUuid": "52399d79_982c65b1",
      "revId": "02bffeb475813ace6efb0c162c7e25300ce30727",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ccc0d1ef_3824d4a2",
        "filename": "lib/event/reactor.c",
        "patchSetId": 11
      },
      "lineNbr": 536,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2018-06-18T23:17:12Z",
      "side": 1,
      "message": "Your new policy is to update stats for each of event, poller, and timer? It looks that add_tsc_stats is called every after action.\n\nAnd I think calling get_ticks() in the add_tsc_stats() may be clean. Inlining get_ticks() or passing now as arguments may be not so meaningful.",
      "parentUuid": "52399d79_982c65b1",
      "revId": "02bffeb475813ace6efb0c162c7e25300ce30727",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f623ebeb_528d31b0",
        "filename": "lib/event/reactor.c",
        "patchSetId": 11
      },
      "lineNbr": 536,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-06-19T16:25:56Z",
      "side": 1,
      "message": "I\u0027ve root caused the problem.\n\npoller-\u003efn may take a lot of time to execute.  Especially for QoS tests - when the QoS timer expires, the timeout function will submit a bunch more I/O.\n\nWhen we insert the timer back into the list, we want to add the time slice to the known time *before* the timeout function executed.  Otherwise the timeout function will not execute as often as expected.  For example, if the timeout function takes 40us to execute, and the timer is 1ms - if we update the current time before calling spdk_poller_insert_timer, the timer will execute every 1040us, not every 1000us.\n\nSo after poller-\u003efn executes, you should save \"now\" into a temporary variable, set now \u003d spdk_get_ticks() and call spdk_reactor_add_tsc_stats() with \"now\".  But then below, use the temporary variable when calling spdk_poller_insert_timer.",
      "parentUuid": "ccc0d1ef_3824d4a2",
      "revId": "02bffeb475813ace6efb0c162c7e25300ce30727",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87780bbf_bd330084",
        "filename": "lib/event/reactor.c",
        "patchSetId": 11
      },
      "lineNbr": 542,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2018-06-18T23:17:12Z",
      "side": 1,
      "message": "updating now at the line 536 affected this now?",
      "range": {
        "startLine": 542,
        "startChar": 48,
        "endLine": 542,
        "endChar": 51
      },
      "revId": "02bffeb475813ace6efb0c162c7e25300ce30727",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0f04b65_2ae77bdf",
        "filename": "lib/event/reactor.c",
        "patchSetId": 11
      },
      "lineNbr": 542,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2018-06-19T08:59:21Z",
      "side": 1,
      "message": "By inlining spdk_get_ticks() here too, qos test fails solidly.\nThis means that large delay of timer explication is not tolerable.",
      "parentUuid": "87780bbf_bd330084",
      "range": {
        "startLine": 542,
        "startChar": 48,
        "endLine": 542,
        "endChar": 51
      },
      "revId": "02bffeb475813ace6efb0c162c7e25300ce30727",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}