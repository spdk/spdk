{
  "comments": [
    {
      "key": {
        "uuid": "a1eaff54_73f38159",
        "filename": "lib/bdev/nvme/bdev_nvme.c",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 1011262
      },
      "writtenOn": "2019-07-23T08:06:58Z",
      "side": 1,
      "message": "Let\u0027s set the default value here.",
      "range": {
        "startLine": 110,
        "startChar": 22,
        "endLine": 110,
        "endChar": 23
      },
      "revId": "490394ddd800d98e5aefbc5f985a1e4f7b0425e2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad340ab8_20b67bef",
        "filename": "lib/bdev/nvme/bdev_nvme.c",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 1011204
      },
      "writtenOn": "2019-07-23T08:21:47Z",
      "side": 1,
      "message": "line 541 already do the right thing, and we can\u0027t access the default value from this file, because it\u0027s defined in nvme_internal.h.",
      "parentUuid": "a1eaff54_73f38159",
      "range": {
        "startLine": 110,
        "startChar": 22,
        "endLine": 110,
        "endChar": 23
      },
      "revId": "490394ddd800d98e5aefbc5f985a1e4f7b0425e2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9f8ce8c_584a2b13",
        "filename": "lib/bdev/nvme/bdev_nvme.c",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 1011262
      },
      "writtenOn": "2019-07-23T08:26:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ad340ab8_20b67bef",
      "range": {
        "startLine": 110,
        "startChar": 22,
        "endLine": 110,
        "endChar": 23
      },
      "revId": "490394ddd800d98e5aefbc5f985a1e4f7b0425e2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0caa7337_217152fe",
        "filename": "lib/bdev/nvme/bdev_nvme.c",
        "patchSetId": 6
      },
      "lineNbr": 1095,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2019-07-23T15:47:07Z",
      "side": 1,
      "message": "I\u0027m not sure this is actually thread safe. What other places are referencing this structure? Are they possibly accessing it while these values are updated?",
      "revId": "490394ddd800d98e5aefbc5f985a1e4f7b0425e2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c7267be_55cbdc14",
        "filename": "lib/bdev/nvme/bdev_nvme.c",
        "patchSetId": 6
      },
      "lineNbr": 1095,
      "author": {
        "id": 1011204
      },
      "writtenOn": "2019-07-25T03:02:05Z",
      "side": 1,
      "message": "The only race condition here is RPC and real hotplug can happen at the same time, but for the real scenarios, we will call this RPC before construct_nvme_bdev, this is safe for that usage.",
      "parentUuid": "0caa7337_217152fe",
      "revId": "490394ddd800d98e5aefbc5f985a1e4f7b0425e2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "331b44fb_0433304b",
        "filename": "lib/bdev/nvme/bdev_nvme.c",
        "patchSetId": 6
      },
      "lineNbr": 1095,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2019-07-25T18:00:49Z",
      "side": 1,
      "message": "I looked over the usage and I don\u0027t think this is going to work without some more thought. There are a number of places where these values are referenced at run time. Specifically, action_on_timeout and timeout_us is used on the timeout path from multiple threads. The two poll periods are only used when the device is first created today, but if we ever wanted to dynamically start and stop pollers they\u0027d be a problem. And finally the retry_count is the trickiest of all because that needs to get assigned to the global spdk_nvme_retry_count, but that value is getting used from within the main I/O path.\n\nI think for this to work we need to make a copy of these values and place them into the bdev. When the user updates the \"default\" version of these opts via RPC, it should only apply to new bdevs created (by copying the opts into the bdev on creation).\n\nThe hardest part of that copying strategy is fixing spdk_nvme_retry_count, which needs to be a cached value in the spdk_nvme_ctrlr or spdk_nvme_qpair I think.",
      "parentUuid": "5c7267be_55cbdc14",
      "revId": "490394ddd800d98e5aefbc5f985a1e4f7b0425e2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}