{
  "comments": [
    {
      "key": {
        "uuid": "ff2e1817_9adeb6ef",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 947,
      "author": {
        "id": 1014253
      },
      "writtenOn": "2018-06-15T15:51:39Z",
      "side": 1,
      "message": "If io_wait_queue has multiple entries, how would it be unplugged from the queue?",
      "revId": "949bafb93039b7b41f68769893b5ecbf33bebf49",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "04f1e81d_4f674367",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 947,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-06-15T16:02:20Z",
      "side": 1,
      "message": "The intention is that an io_wait_queue entry is only added when there are no bdev_ios available.  If two (or more) entries are added, then the first one will be unplugged when one bdev_io becomes available.  The next entry will be unplugged when a second bdev_io becomes available.\n\nBut I do want to allow for case where the callback decides for some reason to *not* submit an I/O - so I plan to change this to a while (ch-\u003eper_thread_count \u003e 0) loop.",
      "parentUuid": "ff2e1817_9adeb6ef",
      "revId": "949bafb93039b7b41f68769893b5ecbf33bebf49",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e09b132d_9dc5bad3",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 2295,
      "author": {
        "id": 1014253
      },
      "writtenOn": "2018-06-15T15:51:39Z",
      "side": 1,
      "message": "Is this the same ch argument (channel) which bdev layer passed to module during submit_request() function? I hope this should be same and module will call the bdev with the same ch which it got from bdev during submit_request and this ch would be underlying device channel.",
      "revId": "949bafb93039b7b41f68769893b5ecbf33bebf49",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1eb1aeb_e3bd3401",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 2295,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-06-15T16:02:20Z",
      "side": 1,
      "message": "Yes - the same channel.",
      "parentUuid": "e09b132d_9dc5bad3",
      "revId": "949bafb93039b7b41f68769893b5ecbf33bebf49",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ac1ef53_7b68a9b8",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 2295,
      "author": {
        "id": 1014253
      },
      "writtenOn": "2018-06-15T16:24:06Z",
      "side": 1,
      "message": "The calls from bdev to module in submit functions have spdk_bdev_channel-\u003echannel which is spdk_io_channel, so if same is passed to this API by the module, how you are getting spdk_bdev_channel from \"ch\" argument (it should be spdk_bdev_channel-\u003echannel?)",
      "parentUuid": "d1eb1aeb_e3bd3401",
      "revId": "949bafb93039b7b41f68769893b5ecbf33bebf49",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "073a1197_7d9a6049",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 2295,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-06-15T16:56:41Z",
      "side": 1,
      "message": "Each bdev effectively has two channels - one for the generic bdev layer (spdk_bdev_channel) and another allocated by the module that is specific to the bdev type (spdk_bdev_channel-\u003echannel).",
      "parentUuid": "7ac1ef53_7b68a9b8",
      "revId": "949bafb93039b7b41f68769893b5ecbf33bebf49",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11823d54_cd500f8d",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 2295,
      "author": {
        "id": 1014253
      },
      "writtenOn": "2018-06-15T17:22:11Z",
      "side": 1,
      "message": "Yes correct, but the \"ch\" argument which module passes as part of this API call will be module specific channel right?\nbut the below line is getting bdev layer generic channel from ch.\nstruct spdk_bdev_channel *channel \u003d spdk_io_channel_get_ctx(ch);",
      "parentUuid": "073a1197_7d9a6049",
      "revId": "949bafb93039b7b41f68769893b5ecbf33bebf49",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e5c3544_2183fc29",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 2302,
      "author": {
        "id": 1014253
      },
      "writtenOn": "2018-06-15T15:51:39Z",
      "side": 1,
      "message": "When module calls this API to queue the context and it gets -EINVAL, can module then retry the submission of this IO by itself in same context?\nIf yes, then during retrying if it gets -ENOMEM, then again it can call this API to queue?",
      "revId": "949bafb93039b7b41f68769893b5ecbf33bebf49",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d994d022_7fc5432f",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 2302,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-06-15T16:02:20Z",
      "side": 1,
      "message": "This per_thread_cache is private to this thread.  So you should always first call the submit function (i.e. spdk_bdev_readv_blocks).  If it fails with -ENOMEM, then we *know* that per_thread_cache_count was 0.  Then you call spdk_bdev_queue_io_wait() and we know it will not return -EINVAL.",
      "parentUuid": "3e5c3544_2183fc29",
      "revId": "949bafb93039b7b41f68769893b5ecbf33bebf49",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e9cdaba_160e2a79",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 2302,
      "author": {
        "id": 1014253
      },
      "writtenOn": "2018-06-15T16:24:06Z",
      "side": 1,
      "message": "So in this case modules can put asserts if call returns -EINVAL.",
      "parentUuid": "d994d022_7fc5432f",
      "revId": "949bafb93039b7b41f68769893b5ecbf33bebf49",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6914322_8868e20a",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 2302,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-06-15T16:56:41Z",
      "side": 1,
      "message": "Correct.  If spdk_bdev_read_blocks (or similar I/O submit function) returns -ENOMEM, and you then immediately call spdk_bdev_queue_io_wait(), it will never return -EINVAL.  An assert() would be appropriate.",
      "parentUuid": "4e9cdaba_160e2a79",
      "revId": "949bafb93039b7b41f68769893b5ecbf33bebf49",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0836a00_0c69e535",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 2305,
      "author": {
        "id": 1014253
      },
      "writtenOn": "2018-06-15T15:51:39Z",
      "side": 1,
      "message": "There might be a case where module has queued its context by calling this API because of resource crunch. Now bdev layer should handle that if there is any element in the io_wait_queue then new IOs from top layer (fabric layer) should also get queued behind this so that there should not be any starvation. However I saw there is one more queue for no_memio and a check is there in bdev layer if no_memio has any entries don\u0027t submit the bdev_io to module but did find this similar check for io_wait_queue.",
      "revId": "949bafb93039b7b41f68769893b5ecbf33bebf49",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e4ccbfc_3ebff46a",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 2305,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-06-15T16:02:20Z",
      "side": 1,
      "message": "The nomem_io queue in the bdev layer is separate - will need to add more documentation to clarify this.\n\nThe nomem_io queue in the bdev layer handles the case where a bdev module returns an error because it ran out of per-channel resources.  I don\u0027t think this applies to your module.  But for example, blobstore allocates a finite number of request structures per thread (these structures are internal to blobstore - not spdk_bdev_io structures).  If those run out, the lvol module completes the I/O with ENOMEM and the generic bdev layer will resubmit once some number of I/O are completed on that same channel.",
      "parentUuid": "e0836a00_0c69e535",
      "revId": "949bafb93039b7b41f68769893b5ecbf33bebf49",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17f03caf_77c6286c",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 2305,
      "author": {
        "id": 1014253
      },
      "writtenOn": "2018-06-15T16:24:06Z",
      "side": 1,
      "message": "Ok, actually I was trying to find a check in your new code which on new IO arrival from above layers checks if io_wait_queue is not empty, queue the new IO and don\u0027t send to module.",
      "parentUuid": "6e4ccbfc_3ebff46a",
      "revId": "949bafb93039b7b41f68769893b5ecbf33bebf49",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d649aae_c42c7368",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 6
      },
      "lineNbr": 2305,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-06-15T16:56:41Z",
      "side": 1,
      "message": "We shouldn\u0027t need such a check.  Once an spdk_bdev_io is freed, all queued io_wait entries will have a chance to consume it.  (My next rev of the patch will fix this logic slightly though.)",
      "parentUuid": "17f03caf_77c6286c",
      "revId": "949bafb93039b7b41f68769893b5ecbf33bebf49",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}