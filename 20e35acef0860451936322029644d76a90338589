{
  "comments": [
    {
      "key": {
        "uuid": "a0957862_ce714d6e",
        "filename": "scripts/setup.sh",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2018-10-01T16:42:53Z",
      "side": 1,
      "message": "determinate -\u003e determine",
      "revId": "20e35acef0860451936322029644d76a90338589",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b23f27a_ad535166",
        "filename": "scripts/setup.sh",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 1014914
      },
      "writtenOn": "2018-10-02T03:52:02Z",
      "side": 1,
      "message": "Thanks! Will update.",
      "parentUuid": "a0957862_ce714d6e",
      "revId": "20e35acef0860451936322029644d76a90338589",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77fec576_467357d4",
        "filename": "scripts/setup.sh",
        "patchSetId": 1
      },
      "lineNbr": 174,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2018-10-01T16:42:53Z",
      "side": 1,
      "message": "Is there any reason to make this check have wildcards in it? Can\u0027t you make it more specific? Also, you should probably put spaces around it so that it doesn\u0027t get a partial match with another parameter, if one is ever added.\n\ngrep -i \" iommu\\.passthrough\u003d1 \"",
      "revId": "20e35acef0860451936322029644d76a90338589",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c872671_a8dab2a6",
        "filename": "scripts/setup.sh",
        "patchSetId": 1
      },
      "lineNbr": 174,
      "author": {
        "id": 1014914
      },
      "writtenOn": "2018-10-02T03:52:02Z",
      "side": 1,
      "message": "Yes, the wildcards are redundant. Will update. Thanks!",
      "parentUuid": "77fec576_467357d4",
      "revId": "20e35acef0860451936322029644d76a90338589",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1efd080b_f752051a",
        "filename": "scripts/setup.sh",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2018-10-01T16:42:53Z",
      "side": 1,
      "message": "Similarly here:\n\ngrep -i \" iommu\u003dpt \"\n\nI\u0027m not really sure what the order of operations are on the kernel cmdline parameters. Specifically, I\u0027m not sure how the intel_iommu options and the amd_iommu options interact with these generic flags.",
      "revId": "20e35acef0860451936322029644d76a90338589",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eadea0b3_19b96f06",
        "filename": "scripts/setup.sh",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2018-10-01T16:42:53Z",
      "side": 1,
      "message": "I don\u0027t see the purpose of this loop. If the device appears in $filelist, but either iommupassthrough or iommupt are set, it uses uio_pci_generic. If the device does not appear in $filelist, it uses uio_pci_generic. So can\u0027t you just write this as:\n\nif [[ $iommupassthrough \u003e 0 ]] || [[ $iommupt \u003e 0 ]]; then\n    driver_name\u003duio_pci_generic\nfi",
      "revId": "20e35acef0860451936322029644d76a90338589",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "95a2ddf5_bce6498e",
        "filename": "scripts/setup.sh",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1014914
      },
      "writtenOn": "2018-10-02T03:52:02Z",
      "side": 1,
      "message": "If the IOMMU is enabled, but either iommupassthrough or iommupt are set, the user can bind either \"uio_pci_generic\" or \"vfio-pci\" kernel drivers with the PCI device. The loop can deal with the case and allow the user to choose.",
      "parentUuid": "eadea0b3_19b96f06",
      "revId": "20e35acef0860451936322029644d76a90338589",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f28bbd5e_b5137840",
        "filename": "scripts/setup.sh",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1011256
      },
      "writtenOn": "2018-10-02T06:59:34Z",
      "side": 1,
      "message": "Before we give user option to choose which driver to load, shouldn\u0027t we check if it\u0027s available? On my system (Ubuntu16 with iommu enabled) uio_pci_generic is not available by default.",
      "range": {
        "startLine": 196,
        "startChar": 2,
        "endLine": 196,
        "endChar": 38
      },
      "revId": "20e35acef0860451936322029644d76a90338589",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aaef7712_c9738dd5",
        "filename": "scripts/setup.sh",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1014914
      },
      "writtenOn": "2018-10-05T12:42:16Z",
      "side": 1,
      "message": "I think we can change \"modprobe $driver_name || true\" to \"modprobe $driver_name\" to detect the kennel module absent.",
      "parentUuid": "f28bbd5e_b5137840",
      "range": {
        "startLine": 196,
        "startChar": 2,
        "endLine": 196,
        "endChar": 38
      },
      "revId": "20e35acef0860451936322029644d76a90338589",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ce202a2_da6c5c75",
        "filename": "scripts/setup.sh",
        "patchSetId": 1
      },
      "lineNbr": 202,
      "author": {
        "id": 1011256
      },
      "writtenOn": "2018-10-02T06:59:34Z",
      "side": 1,
      "message": "setup.sh is run as part of autotest.sh used to run tests suites in automated fashion.\nAdding an interactive \"read\" statement to setup.sh also makes autotest.sh stop on user input as well and stops tests execution.",
      "range": {
        "startLine": 202,
        "startChar": 3,
        "endLine": 202,
        "endChar": 16
      },
      "revId": "20e35acef0860451936322029644d76a90338589",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d8a68a1_baad0a79",
        "filename": "scripts/setup.sh",
        "patchSetId": 1
      },
      "lineNbr": 202,
      "author": {
        "id": 1014914
      },
      "writtenOn": "2018-10-05T12:42:16Z",
      "side": 1,
      "message": "Thanks a lot for the comment. Maybe we could define 6 seconds timer to control the input. If there was no any input, select \"uio_pci_generic\" by default. I have validated it in my test bed, the \"autotest.sh\" scripts works well. If you think it is acceptable, I will add the timer in the next version. Thanks!",
      "parentUuid": "0ce202a2_da6c5c75",
      "range": {
        "startLine": 202,
        "startChar": 3,
        "endLine": 202,
        "endChar": 16
      },
      "revId": "20e35acef0860451936322029644d76a90338589",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}