{
  "comments": [
    {
      "key": {
        "uuid": "fb5f84e0_fc71d7c3",
        "filename": "examples/nvme/perf/perf.c",
        "patchSetId": 2
      },
      "lineNbr": 1218,
      "author": {
        "id": 1010525
      },
      "writtenOn": "2017-09-07T22:53:22Z",
      "side": 1,
      "message": "I think this breaks usage of NVMe-oF discovery services, since the discovery NQN won\u0027t match the NQNs of the discovered controllers.",
      "revId": "ba792604305490f2269a6909dfdd38ec0330f4ce",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6cdf6e70_daf199a1",
        "filename": "examples/nvme/perf/perf.c",
        "patchSetId": 2
      },
      "lineNbr": 1218,
      "author": {
        "id": 1011207
      },
      "writtenOn": "2017-09-07T23:05:19Z",
      "side": 1,
      "message": "There is trtype check first in the above logic and in this code block, it is for the PCIe type.",
      "parentUuid": "fb5f84e0_fc71d7c3",
      "revId": "ba792604305490f2269a6909dfdd38ec0330f4ce",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb4ac4f8_e5add7e3",
        "filename": "examples/nvme/perf/perf.c",
        "patchSetId": 2
      },
      "lineNbr": 1218,
      "author": {
        "id": 1010525
      },
      "writtenOn": "2017-09-07T23:16:26Z",
      "side": 1,
      "message": "Ah, you are right - in that case, I guess this is fine.",
      "parentUuid": "6cdf6e70_daf199a1",
      "revId": "ba792604305490f2269a6909dfdd38ec0330f4ce",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f96d64f8_c0941030",
        "filename": "examples/nvme/perf/perf.c",
        "patchSetId": 2
      },
      "lineNbr": 1218,
      "author": {
        "id": 1010525
      },
      "writtenOn": "2017-09-07T23:26:01Z",
      "side": 1,
      "message": "Actually, looking at this again, we should be checking this condition in probe_cb so we don\u0027t attach to the other controllers at all, rather than attaching and then not using the controller.",
      "parentUuid": "fb4ac4f8_e5add7e3",
      "revId": "ba792604305490f2269a6909dfdd38ec0330f4ce",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e56c4385_e8cb2501",
        "filename": "examples/nvme/perf/perf.c",
        "patchSetId": 2
      },
      "lineNbr": 1218,
      "author": {
        "id": 1011207
      },
      "writtenOn": "2017-09-07T23:33:41Z",
      "side": 1,
      "message": "When perf started as the Primary or standalone process, it is checked other our current logic can work on the selected ctrlrs. The issue here is that perf started as the Secondary process, and all the attached ctrlrs from the Primary process will call the \"attach_cb\" for the Secondary process. So that the check is added here. The basic limitation so far is that the Secondary process does not probe ctrlrs directly.",
      "parentUuid": "f96d64f8_c0941030",
      "revId": "ba792604305490f2269a6909dfdd38ec0330f4ce",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec6e5b16_93504643",
        "filename": "examples/nvme/perf/perf.c",
        "patchSetId": 2
      },
      "lineNbr": 1218,
      "author": {
        "id": 1011207
      },
      "writtenOn": "2017-09-07T23:36:40Z",
      "side": 1,
      "message": "Maybe I can add a \"spdk_process_is_primary()\" check here to be more clear.",
      "parentUuid": "e56c4385_e8cb2501",
      "revId": "ba792604305490f2269a6909dfdd38ec0330f4ce",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}