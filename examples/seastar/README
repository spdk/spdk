SPDK with Seastar framework
===========================

This directory contains some examples for using SPDK libraries with the
Seastar framework.

Requires a debug build of Seastar to exist as a peer to the root of this
spdk repository.

"nvme" does a simple "Hello World" type flow with the SPDK nvme driver.

"spdk_tgt" is a fully functional SPDK target application.  Currently only
iSCSI is linked in but NVMe-oF and vhost will be added eventually.  I
have been able to create target nodes, discover them and login with this
target.

"sock" is a simple echo server built on top of the spdk sock library.
It works with an SPDK sock implementation for the Seastar network stack,
including when the network stack is running in native DPDK mode.

Please use the suppressions.txt file to suppress an LSAN leak notification
from the ltdl library used by Seastar.

LSAN_OPTIONS=suppressions=suppressions.txt ./nvme -c1
LSAN_OPTIONS=suppressions=suppressions.txt ./spdk_tgt -c4
LSAN_OPTIONS=suppressions=suppressions.txt ./sock -c1

Note that the -c4 option means how many cores to use (-c4 means 4 cores).

(A lot more details will be added here for how to run, todo items, etc.)

Instructions to build Seastar on Ubuntu 19.04:

# Clone seastar so it is a peer of spdk
git clone https://github.com/scylladb/seastar.git
cd seastar
git submodule update --init --recursive

# There are some fixes needed to enable building and linking
# Seastar with the native DPDK stack and with SPDK.  Some of
# these are specific to Ubuntu.  Apply this patch to get the
# fixes.  (Some of these will eventually be upstreamed if
# we move forward with Seastar.)
patch -p1 < ../spdk/examples/seastar/seastar.patch

sudo ./install-dependencies.sh

# It's not clear why we have to "cook" fmt ourselves, but
# the Seastar documentation clearly spells it out as a common
# thing you have to do.
export http_proxy=http://proxy-chain.intel.com:911
export https_proxy=http://proxy-chain.intel.com:911
./configure.py --mode=debug --cook fmt --enable-dpdk

ninja -C build/debug

cd ../spdk
./configure --with-dpdk=../seastar/build/debug/_cooking/ingredient/dpdk/build/x86_64-native-linuxapp-gcc
make -C examples/seastar

sudo modprobe uio_pci_generic
sudo ifconfig <nic if, i.e. enp0s6> down
sudo dpdk/usertools/dpdk-devbind.py --bind=uio_pci_generic <nic if, i.e. enp0s6>

sudo LSAN_OPTIONS=suppressions=suppressions.txt examples/seastar/sock -c1 \
  --network-stack native --dpdk-pmd --host-ipv4-addr 192.168.0.2 \
  --netmask-ipv4-addr 255.255.255.0

You can then run the SPDK hello_sock application from a different system and
see your data echoed back.

echo Hello world! | sudo examples/sock/hello_world/hello_sock -H 192.168.0.2 -P 3260
