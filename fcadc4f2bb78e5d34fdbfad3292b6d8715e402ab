{
  "comments": [
    {
      "key": {
        "uuid": "81306afd_cb26f220",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 19
      },
      "lineNbr": 1661,
      "author": {
        "id": 1011218
      },
      "writtenOn": "2019-06-28T04:51:52Z",
      "side": 1,
      "message": "I think to_last_block_bytes should be just \u003d (to_next_boundary_bytes % blocklen). I can show a case that\u0027s broken right now:\n\nto_next_boundary_bytes \u003d 28k + 3k + 512;\nblocklen \u003d 4k;\nto_last_block_bytes \u003d _to_next_boundary(28k + 3k + 512, 4k) \u003d 4k - 3k - 512 \u003d 512;\n\nSo you end up unwinding 512 bytes, which gives you an I/O of size 31k, still not aligned to 4k.",
      "revId": "fcadc4f2bb78e5d34fdbfad3292b6d8715e402ab",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39261f7c_1d378b3f",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 19
      },
      "lineNbr": 1661,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-06-28T05:01:17Z",
      "side": 1,
      "message": "Thank you, Darek is correct.\n\nThe following reminded to me.\n\nI thought first in my code yesterday that blocklen - _to_next_boundary(to_next_boundary_bytes, block_len) but that was too complicated and didn\u0027t sit well on me.\n\nChangpeng, could you address the point Darek says in UT?",
      "parentUuid": "81306afd_cb26f220",
      "revId": "fcadc4f2bb78e5d34fdbfad3292b6d8715e402ab",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4177de91_cc788f3b",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 19
      },
      "lineNbr": 1705,
      "author": {
        "id": 1011218
      },
      "writtenOn": "2019-06-28T04:31:17Z",
      "side": 1,
      "message": "Isn\u0027t it the last instruction in this function? I can\u0027t see how this changes the flow.",
      "revId": "fcadc4f2bb78e5d34fdbfad3292b6d8715e402ab",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f13af7ce_407bb6dc",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 19
      },
      "lineNbr": 1705,
      "author": {
        "id": 1011204
      },
      "writtenOn": "2019-06-28T04:39:46Z",
      "side": 1,
      "message": "We\u0027ve run out of child_iov space, so it will be triggered in _spdk_bdev_io_split_done() next time.",
      "parentUuid": "4177de91_cc788f3b",
      "revId": "fcadc4f2bb78e5d34fdbfad3292b6d8715e402ab",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cb1bfd9_c74865a9",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 19
      },
      "lineNbr": 1705,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-06-28T04:49:56Z",
      "side": 1,
      "message": "When we rewind, child_iovcnt becomes positive again, and we enter the while loop from the line 1622 again. This will be an infinite loop, and so we need forceful exiting and Changpeng added the flag child_iov_run_out.\n\nSo it looks good to me.",
      "parentUuid": "f13af7ce_407bb6dc",
      "revId": "fcadc4f2bb78e5d34fdbfad3292b6d8715e402ab",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a1c9be4_062051f6",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 19
      },
      "lineNbr": 1705,
      "author": {
        "id": 1011218
      },
      "writtenOn": "2019-06-28T04:53:35Z",
      "side": 1,
      "message": "My bad, this part is fine.",
      "parentUuid": "5cb1bfd9_c74865a9",
      "revId": "fcadc4f2bb78e5d34fdbfad3292b6d8715e402ab",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}