{
  "comments": [
    {
      "key": {
        "uuid": "49c68be6_e9dc6877",
        "filename": "lib/nvme/nvme_ctrlr.c",
        "patchSetId": 16
      },
      "lineNbr": 981,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-10-23T17:29:53Z",
      "side": 1,
      "message": "I still have the same question on this - whether we considered keeping this io qpair allocated, and let the active_io_qpair logic below handle this qpair.",
      "revId": "66105f78f1cae5214ca5e722b598c4f49bd954c7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4f78bf8_3542ee25",
        "filename": "lib/nvme/nvme_ctrlr.c",
        "patchSetId": 16
      },
      "lineNbr": 981,
      "author": {
        "id": 1013008
      },
      "writtenOn": "2019-10-23T18:15:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "49c68be6_e9dc6877",
      "revId": "66105f78f1cae5214ca5e722b598c4f49bd954c7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a9344d1_74e75c35",
        "filename": "lib/nvme/nvme_ctrlr.c",
        "patchSetId": 16
      },
      "lineNbr": 1044,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-10-23T17:32:47Z",
      "side": 1,
      "message": "I\u0027d really prefer to avoid this extra step if possible.  Letting it get handled by the existing active_io_qpair logic would simplify the code.",
      "revId": "66105f78f1cae5214ca5e722b598c4f49bd954c7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a82a261_e331bbb3",
        "filename": "lib/nvme/nvme_ctrlr.c",
        "patchSetId": 16
      },
      "lineNbr": 1044,
      "author": {
        "id": 1013008
      },
      "writtenOn": "2019-10-23T18:15:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0a9344d1_74e75c35",
      "revId": "66105f78f1cae5214ca5e722b598c4f49bd954c7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cccaf946_93e5a335",
        "filename": "lib/nvme/nvme_io_msg.c",
        "patchSetId": 16
      },
      "lineNbr": 53,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-10-23T17:29:53Z",
      "side": 1,
      "message": "I\u0027m still not sure about this lock protecting against preemptive producers.",
      "revId": "66105f78f1cae5214ca5e722b598c4f49bd954c7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51c9d967_6539b7ab",
        "filename": "lib/nvme/nvme_io_msg.c",
        "patchSetId": 16
      },
      "lineNbr": 53,
      "author": {
        "id": 1013008
      },
      "writtenOn": "2019-10-23T18:15:05Z",
      "side": 1,
      "message": "According to the DPDK documentation \"https://doc.dpdk.org/guides/prog_guide/env_abstraction_layer.html\", section 3.3.5. -- Known Issues, this lock makes an access to the ring compliant with an exception:\n\"3. It CAN be used for preemptible single-producer and non-preemptible multi-consumer use case.\"\n\nWith no lock we cannot be sure that threads deadlock described in DPDKs documentation never happen.",
      "parentUuid": "cccaf946_93e5a335",
      "revId": "66105f78f1cae5214ca5e722b598c4f49bd954c7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}