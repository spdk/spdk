{
  "comments": [
    {
      "key": {
        "uuid": "b27f8b64_9fd5c8e5",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 13
      },
      "lineNbr": 631,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2020-01-16T22:41:15Z",
      "side": 1,
      "message": "I think it may be good to set bdev_io-\u003einternal.need_aux_buf to false here.\nBecause need was satisfied here.",
      "revId": "4ce10952dfcdef18cdb9b068e5ead923e5c6614b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7217646_7981ee29",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 13
      },
      "lineNbr": 631,
      "author": {
        "id": 1011289
      },
      "writtenOn": "2020-01-16T23:29:33Z",
      "side": 1,
      "message": "That would break things because it\u0027s used (the boolean) in bdev_io_put_buf() to know whether to put the aux buffer or not. So I only set it to false after its been put, not when its been set",
      "parentUuid": "b27f8b64_9fd5c8e5",
      "revId": "4ce10952dfcdef18cdb9b068e5ead923e5c6614b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b63c6425_b9499e5f",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 13
      },
      "lineNbr": 631,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2020-01-17T00:10:01Z",
      "side": 1,
      "message": "I just thought that we could use the combination of aux_buf and need_aux_buf as state transition.\n\nassert(bdev_io-\u003eu.bdev.aux_buf \u003d\u003d NULL);\nbdev_io-\u003eu.bdev.aux_buf \u003d aligned_buf;\n\nWe can skip using need_aux_buf in bdev_io_put_buf() as you replied.",
      "parentUuid": "b7217646_7981ee29",
      "revId": "4ce10952dfcdef18cdb9b068e5ead923e5c6614b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1456803e_5f5f3a6e",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 13
      },
      "lineNbr": 637,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2020-01-16T22:41:15Z",
      "side": 1,
      "message": "Together with other comments, I want to propose the following.\n\nstatic void\n_bdev_io_put_buf(struct spdk_bdev_io *bdev_io, void *buf, uint64_t buf_len)\n{\n\tstruct spdk_bdev *bdev \u003d bdev_io-\u003ebdev;\n\tstruct spdk_mempool *pool;\n\tstruct spdk_bdev_io *tmp;\n\tstruct spdk_bdev_mgmt_channel *ch;\n\tuint64_t alignment;\n\n\talignment \u003d spdk_bdev_get_buf_align(bdev);\n\tch \u003d bdev_io-\u003einternal.ch-\u003eshared_resource-\u003emgmt_ch;\n\n\tif (buf_len + alignment + md_len \u003c\u003d SPDK_BDEV_BUF_SIZE_WITH_MD(SPDK_BDEV_SMALL_BUF_MAX_SIZE) +\n\t    SPDK_BDEV_POOL_ALIGNMENT) {\n\t\tpool \u003d g_bdev_mgr.buf_small_pool;\n\t\tstailq \u003d \u0026ch-\u003eneed_buf_small;\n\t} else {\n\t\tpool \u003d g_bdev_mgr.buf_large_pool;\n\t\tstailq \u003d \u0026ch-\u003eneed_buf_large;\n\t}\n\n\tif (STAILQ_EMPTY(stailq)) {\n\t\tspdk_mempool_put(pool, buf);\n\t} else {\n\t\ttmp \u003d STAILQ_FIRST(stailq);\n\t\tSTAILQ_REMOVE_HEAD(stailq, internal.buf_link);\n\t\t_bdev_io_set_buf(tmp, buf, tmp-\u003einternal.buf_len);\n\t}\n}\n\nstatic void\nbdev_io_put_buf(struct spdk_bdev_io *bdev_io)\n{\n\tvoid *buf;\n\tuint64_t buf_len;\n\n\tbuf \u003d bdev_io-\u003einternal.buf;\n\tif (buf !\u003d NULL) {\n\t\tbuf_len \u003d bdev_io-\u003einternal.buf_len;\n\t\tbuf_len +\u003d spdk_bdev_is_md_separate(bdev) ? bdev_io-\u003eu.bdev.num_blocks * bdev-\u003emd_len : 0;\n\n\t\tbdev_io-\u003einternal.buf \u003d NULL;\n\t\t_bdev_io_put_buf(bdev_io, buf, buf_len);\n\t}\n\n\tbuf \u003d bdev_io-\u003eu.bdev.aux_buf;\n\tif (buf !\u003d NULL) {\n\t\tbuf_len \u003d bdev_io-\u003eu.bdev.num_blocks * bdev_io-\u003ebdev-\u003eblocklen;\n\n\t\tbdev_io-\u003eu.bdev.aux_buf \u003d NULL;\n\t\t_bdev_io_put_buf(bdev_io, buf, buf_len);\n\t}\n}",
      "range": {
        "startLine": 637,
        "startChar": 0,
        "endLine": 637,
        "endChar": 16
      },
      "revId": "4ce10952dfcdef18cdb9b068e5ead923e5c6614b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2118fb74_567fc7c6",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 13
      },
      "lineNbr": 637,
      "author": {
        "id": 1011289
      },
      "writtenOn": "2020-01-16T23:29:33Z",
      "side": 1,
      "message": "We can\u0027t use the union here:\n\nbuf \u003d bdev_io-\u003eu.bdev.aux_buf;\n\nbecause this function is called by callers who may not be using that union.  What is your goal with this proposed block of code? Do you see it as simpler?",
      "parentUuid": "1456803e_5f5f3a6e",
      "range": {
        "startLine": 637,
        "startChar": 0,
        "endLine": 637,
        "endChar": 16
      },
      "revId": "4ce10952dfcdef18cdb9b068e5ead923e5c6614b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "beadefa7_e74a120d",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 13
      },
      "lineNbr": 637,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2020-01-17T00:10:01Z",
      "side": 1,
      "message": "This may be personal preference but I saw the code simpler by factor out. According to your comment, we may be able to reuse buf_len by adding md_len as follows.\n\n\nbuf \u003d bdev_io-\u003einternal.buf;\nbuf_len \u003d bdev_io-\u003eu.bdev.aux_buf;\nif (buf !\u003d NULL) {\n  md_len \u003d ...;\n  ...\n  _bdev_io_put_buf(bdev_io, buf, buf_len + md_len);\n}\nbuf \u003d bdev_io-\u003einternal.aux_buf;\nif (buf !\u003d NULL) {\n  ...\n  _bdev_io_put_buf(bdev_io, buf, buf_len);\n}",
      "parentUuid": "2118fb74_567fc7c6",
      "range": {
        "startLine": 637,
        "startChar": 0,
        "endLine": 637,
        "endChar": 16
      },
      "revId": "4ce10952dfcdef18cdb9b068e5ead923e5c6614b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08a1b141_fba65b08",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 13
      },
      "lineNbr": 685,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2020-01-16T22:41:15Z",
      "side": 1,
      "message": "Is this wrong?\n\nWe should use bdev_io-\u003eu.bdev.num_blocks * bdev_io-\u003ebdev-\u003eblocklen instead?\nPlease see the line 765.",
      "range": {
        "startLine": 685,
        "startChar": 11,
        "endLine": 685,
        "endChar": 37
      },
      "revId": "4ce10952dfcdef18cdb9b068e5ead923e5c6614b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f89c8e46_ad681896",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 13
      },
      "lineNbr": 685,
      "author": {
        "id": 1011289
      },
      "writtenOn": "2020-01-16T23:29:33Z",
      "side": 1,
      "message": "they are one and the same.  By design the aux buf len is the same as the internal buf len which is the same as line 765 so I could do the math here as well but I wanted to make it clear that its always the same as the internal buf wrt length",
      "parentUuid": "08a1b141_fba65b08",
      "range": {
        "startLine": 685,
        "startChar": 11,
        "endLine": 685,
        "endChar": 37
      },
      "revId": "4ce10952dfcdef18cdb9b068e5ead923e5c6614b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ee3ed14_ee55ea62",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 13
      },
      "lineNbr": 685,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2020-01-17T00:10:01Z",
      "side": 1,
      "message": "You already described that very clearly in header file. I\u0027m sorry I overlooked that and I had been confused by overwriting bdev_io-\u003einternal.buf_len.\n\nThen how about using bdev_io-\u003einternal.buf_len in spdk_bdev_io_get_aux_buf() or checking if bdev_io-\u003einternal.buf_len \u003d\u003d bdev_io-\u003eu.bdev.num_blocks * bdev_io-\u003ebdev-\u003eblocklen?",
      "parentUuid": "f89c8e46_ad681896",
      "range": {
        "startLine": 685,
        "startChar": 11,
        "endLine": 685,
        "endChar": 37
      },
      "revId": "4ce10952dfcdef18cdb9b068e5ead923e5c6614b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "676c5f4f_cf78a978",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 13
      },
      "lineNbr": 690,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2020-01-16T22:41:15Z",
      "side": 1,
      "message": "Please see the above comment.",
      "range": {
        "startLine": 690,
        "startChar": 1,
        "endLine": 690,
        "endChar": 40
      },
      "revId": "4ce10952dfcdef18cdb9b068e5ead923e5c6614b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59ae79e7_e7083471",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 13
      },
      "lineNbr": 717,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2020-01-16T22:41:15Z",
      "side": 1,
      "message": "I think checking only bdev_io-\u003eu.bdev.aux_buf is enough.",
      "range": {
        "startLine": 717,
        "startChar": 5,
        "endLine": 717,
        "endChar": 70
      },
      "revId": "4ce10952dfcdef18cdb9b068e5ead923e5c6614b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba19f092_2e19ece7",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 13
      },
      "lineNbr": 717,
      "author": {
        "id": 1011289
      },
      "writtenOn": "2020-01-16T23:29:33Z",
      "side": 1,
      "message": "should be, I was just just being safe :) I can change it but I\u0027ll wait for your feedback on other comments and possibly for Jim\u0027s review also.",
      "parentUuid": "59ae79e7_e7083471",
      "range": {
        "startLine": 717,
        "startChar": 5,
        "endLine": 717,
        "endChar": 70
      },
      "revId": "4ce10952dfcdef18cdb9b068e5ead923e5c6614b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}