{
  "comments": [
    {
      "key": {
        "uuid": "248e4f08_99c760d1",
        "filename": "include/spdk/blob.h",
        "patchSetId": 27
      },
      "lineNbr": 471,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2018-05-02T07:20:47Z",
      "side": 1,
      "message": "Is this behavior generally acceptable? \n\nIf clone-\u003eback_bs_dev-\u003eback_bs_dev is thin provisioned, should the inflated clone be thin provisioned too?\n\nInheriting thin provisioning setting to the inflated clone is good enhancement? If yes, adding any TBD comment may be helpful.\n\nCurrently knowing if zeroes_bs_dev or not may not be possible because struct spdk_bs_dev doesn\u0027t have any usable information.",
      "range": {
        "startLine": 471,
        "startChar": 12,
        "endLine": 471,
        "endChar": 49
      },
      "revId": "45b26eec083cb13ce0b41e573aa90bab218a4b5b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6dc0df53_4b73aeb6",
        "filename": "include/spdk/blob.h",
        "patchSetId": 27
      },
      "lineNbr": 471,
      "author": {
        "id": 1013008
      },
      "writtenOn": "2018-05-04T15:34:54Z",
      "side": 1,
      "message": "If we want to create thin provisioned inflated blob we need to check if in any of ancestors page is allocated. I\u0027m thinking about something like this:\n\n/* Check if parent allocates page */\nstatic inline bool\n_spdk_bs_page_needs_allocation_next(struct spdk_blob *blob, uint32_t page)\n{\n\tstruct spdk_blob_bs_dev *b \u003d blob-\u003eback_bs_dev;\n\n\tif (_spdk_bs_page_is_allocated(blob, page)) {\n\t\t/* if page is allocated we need to claim it */\n\t\treturn true;\n\t}\n\n\tif (b \u003d\u003d NULL || b-\u003eblob \u003d\u003d NULL) {\n\t\t/* Blob have no back_bs_dev, so we do not need to allocate page */\n\t\treturn false;\n\t}\n\n\treturn _spdk_bs_page_needs_allocation_next(b-\u003eblob, page);\n}\n\n/* Check if page needs allocation */\nstatic inline bool\n_spdk_bs_page_needs_allocation(struct spdk_blob *blob, uint32_t page)\n{\n\tstruct spdk_blob_bs_dev *b \u003d blob-\u003eback_bs_dev;\n\n\tif (_spdk_bs_page_is_allocated(blob, page)) {\n\t\t/* Page is already allocated */\n\t\treturn false;\n\t}\n\n\t/* Blob have no back_bs_dev */\n\tif (b \u003d\u003d NULL || b-\u003eblob \u003d\u003d NULL) {\n\t\t/* Page is not allocated, but there\u0027s not bs_dev */\n\t\treturn false;\n\t}\n\n\t/* Check if any of ancessors have allocated page */\n\treturn _spdk_bs_page_needs_allocation_next(b-\u003eblob, page);\n}\n\nBut this is only an idea and requires more testing. For now, most of backing devices are read only (like snapshots), so we can assume that page allocation doesn\u0027t change on ancestor elsewhere problem with synchronization will be a little challenging.\n\nThis feature is required for Cinder integration (https://trello.com/c/zsQgOW5M/3-lvol-snpashots-clones). I can go ahead with this idea if there\u0027s no other objections.\n\nI had also alternative solution https://review.gerrithub.io/#/c/408332/ which doesn\u0027t require zero length writes and may let to inflate (touch) only a part of blob, so maybe mixing both is some alternative.",
      "parentUuid": "248e4f08_99c760d1",
      "range": {
        "startLine": 471,
        "startChar": 12,
        "endLine": 471,
        "endChar": 49
      },
      "revId": "45b26eec083cb13ce0b41e573aa90bab218a4b5b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62e79f3b_a869f32c",
        "filename": "include/spdk/blob.h",
        "patchSetId": 27
      },
      "lineNbr": 471,
      "author": {
        "id": 1011262
      },
      "writtenOn": "2018-05-07T11:46:55Z",
      "side": 1,
      "message": "Shuhei I think this is a nice idea but it does not entirely fit this function. Idea of this function was to make any thin provisioned blob to become thick provisioned. I agree that functionality that you suggested could be useful, but I would see it rather as a different function (as this would target clone/snapshot functionality only). That way user may choose between \"make any blob thick provisioned\" and \"make this blob independent from any other blob\".\n\nAnyway I think this is a topic for another patch and we can discuss approach to this during community meeting or in mailing list.",
      "parentUuid": "6dc0df53_4b73aeb6",
      "range": {
        "startLine": 471,
        "startChar": 12,
        "endLine": 471,
        "endChar": 49
      },
      "revId": "45b26eec083cb13ce0b41e573aa90bab218a4b5b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c474840a_2dd94216",
        "filename": "lib/blob/blobstore.c",
        "patchSetId": 27
      },
      "lineNbr": 1702,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2018-05-08T06:49:20Z",
      "side": 1,
      "message": "Do you have specific reason why spdk_blob_io_touch() is not used? Creating a new function like the following may be clean.\n\nspdk_blob_io_touch(blob, channel, offset, cb_fn, cb_arg)\n{\n  if (_spdk_bs_page_is_allocated(blob, offset)) {\n    cb_fn(cb_arg, 0);\n    return;\n  }\n\n  op \u003d spdk_bs_user_op_alloc(_ch, \u0026cpl, op_type, blob, NULL, 0, offset, 0);\n  _spdk_bs_allocate_and_copy_cluster(blob, _ch, offset, op);\n}",
      "revId": "45b26eec083cb13ce0b41e573aa90bab218a4b5b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a65b08b_7595579c",
        "filename": "lib/blob/blobstore.c",
        "patchSetId": 27
      },
      "lineNbr": 4089,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2018-05-07T23:25:38Z",
      "side": 1,
      "message": "why copy bserrno to ctx-\u003ebserrno ?",
      "revId": "45b26eec083cb13ce0b41e573aa90bab218a4b5b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af5d3acb_809804e1",
        "filename": "lib/blob/blobstore.c",
        "patchSetId": 27
      },
      "lineNbr": 4108,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2018-05-07T23:25:38Z",
      "side": 1,
      "message": "same as above.",
      "revId": "45b26eec083cb13ce0b41e573aa90bab218a4b5b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38ab3831_0432faba",
        "filename": "lib/blob/blobstore.c",
        "patchSetId": 27
      },
      "lineNbr": 4132,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2018-05-07T23:25:38Z",
      "side": 1,
      "message": "why copy bserrno to ctx-\u003ebserrno ? To get error log?",
      "revId": "45b26eec083cb13ce0b41e573aa90bab218a4b5b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1d5729c_2914e5b2",
        "filename": "lib/blob/blobstore.c",
        "patchSetId": 27
      },
      "lineNbr": 4149,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2018-05-07T23:25:38Z",
      "side": 1,
      "message": "0 may be better ?",
      "range": {
        "startLine": 4149,
        "startChar": 37,
        "endLine": 4149,
        "endChar": 44
      },
      "revId": "45b26eec083cb13ce0b41e573aa90bab218a4b5b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "460cbc6f_140714a4",
        "filename": "lib/blob/blobstore.c",
        "patchSetId": 27
      },
      "lineNbr": 4162,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2018-05-07T23:25:38Z",
      "side": 1,
      "message": "why not _spdk_bs_clone_snapshot_cleanup_finish(ctx, bserrno) ? To do get error log?",
      "revId": "45b26eec083cb13ce0b41e573aa90bab218a4b5b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "744d57a3_04251f65",
        "filename": "lib/blob/blobstore.c",
        "patchSetId": 27
      },
      "lineNbr": 4176,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2018-04-27T20:17:17Z",
      "side": 1,
      "message": "There are a number of race conditions that need to be handled (even assuming that this is only called from the metadata thread).\n\nThis loop confirms that there are enough clusters to inflate the blob right now, but the clusters are not claimed right up front. They\u0027re lazily claimed as the inflation happens (mostly because the inflation is a 0 length write to re-use code). That means that some time between when this check occurs and when the inflation for a cluster is actually triggered, there could be no free clusters remaining.",
      "revId": "45b26eec083cb13ce0b41e573aa90bab218a4b5b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72ed8a25_7c08f97d",
        "filename": "lib/blob/blobstore.c",
        "patchSetId": 27
      },
      "lineNbr": 4176,
      "author": {
        "id": 1013008
      },
      "writtenOn": "2018-04-30T16:02:48Z",
      "side": 1,
      "message": "Yes, this is more sanity test for inflate operation and it doesn\u0027t guarantee that operation success. The same situation is when we want to write the whole blob with a data. To solve this problem we may use freeze IO mechanism to made inflate more atomic (or at least freeze only these which requires cluster allocation). Other solution is to let application try to inflate, and if inflation fails let her to decide what to do with that. If this is not a common situation it can be more effective and clear.",
      "parentUuid": "744d57a3_04251f65",
      "revId": "45b26eec083cb13ce0b41e573aa90bab218a4b5b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f4e2b1b_fdafa33a",
        "filename": "lib/blob/blobstore.c",
        "patchSetId": 27
      },
      "lineNbr": 4183,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2018-05-07T23:25:38Z",
      "side": 1,
      "message": "why not _spdk_bs_clone_snapshot_origblob_cleanup(ctx, -ENOSPC) ?",
      "revId": "45b26eec083cb13ce0b41e573aa90bab218a4b5b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}