{
  "comments": [
    {
      "key": {
        "uuid": "6c1d68fe_01920198",
        "filename": "lib/bdev/lvol/vbdev_lvol.c",
        "patchSetId": 31
      },
      "lineNbr": 344,
      "author": {
        "id": 1011221
      },
      "writtenOn": "2018-06-20T13:51:40Z",
      "side": 1,
      "message": "Double new line",
      "revId": "7fbfe68536797382e1e81561540a877729688f6f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fda7acb2_cc0afda0",
        "filename": "lib/bdev/lvol/vbdev_lvol.c",
        "patchSetId": 31
      },
      "lineNbr": 1167,
      "author": {
        "id": 1011221
      },
      "writtenOn": "2018-06-20T13:51:40Z",
      "side": 1,
      "message": "Double new line",
      "revId": "7fbfe68536797382e1e81561540a877729688f6f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb8010a0_6b17a436",
        "filename": "lib/lvol/lvol.c",
        "patchSetId": 31
      },
      "lineNbr": 1107,
      "author": {
        "id": 1011221
      },
      "writtenOn": "2018-06-20T13:51:40Z",
      "side": 1,
      "message": "Shouldn\u0027t there be pthread_mutex_destroy(lvol-\u003emutex) somewhere in spdk_lvol_destroy() path?",
      "range": {
        "startLine": 1107,
        "startChar": 1,
        "endLine": 1107,
        "endChar": 45
      },
      "revId": "7fbfe68536797382e1e81561540a877729688f6f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02eea800_70fdd049",
        "filename": "lib/lvol/lvol.c",
        "patchSetId": 31
      },
      "lineNbr": 1107,
      "author": {
        "id": 1011221
      },
      "writtenOn": "2018-06-21T13:04:38Z",
      "side": 1,
      "message": "Looking around the code, the previous suggestion might have been too tame even.\n\nThere are quite a few places where struct spdk_lvol is freed, *most of them* should destroy the mutex too. Maybe it would be time to have _spdk_lvol_free(), that would free lvol, lvol-\u003eunique_id and lvol-\u003emutex ? [Separate before this one would suit it best]\n\nThere is lvol allocation path that does not go through spdk_lvol_create() in _spdk_load_next_lvol(). This is done during lvs load. Mutex init should be there too.",
      "parentUuid": "bb8010a0_6b17a436",
      "range": {
        "startLine": 1107,
        "startChar": 1,
        "endLine": 1107,
        "endChar": 45
      },
      "revId": "7fbfe68536797382e1e81561540a877729688f6f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e192f093_167c75bf",
        "filename": "lib/lvol/lvol.c",
        "patchSetId": 31
      },
      "lineNbr": 1107,
      "author": {
        "id": 1011211
      },
      "writtenOn": "2018-06-27T07:21:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "02eea800_70fdd049",
      "range": {
        "startLine": 1107,
        "startChar": 1,
        "endLine": 1107,
        "endChar": 45
      },
      "revId": "7fbfe68536797382e1e81561540a877729688f6f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38240096_7e4b25f0",
        "filename": "test/unit/lib/bdev/vbdev_lvol.c/vbdev_lvol_ut.c",
        "patchSetId": 31
      },
      "lineNbr": 322,
      "author": {
        "id": 1011221
      },
      "writtenOn": "2018-06-20T13:51:40Z",
      "side": 1,
      "message": "unnecessary whitespace change",
      "revId": "7fbfe68536797382e1e81561540a877729688f6f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a26eeba4_25f33109",
        "filename": "test/unit/lib/bdev/vbdev_lvol.c/vbdev_lvol_ut.c",
        "patchSetId": 31
      },
      "lineNbr": 445,
      "author": {
        "id": 1011221
      },
      "writtenOn": "2018-06-20T13:51:40Z",
      "side": 1,
      "message": "Contrary to another comment (see lvol_ut.c), this return value changes path of vbdev_lvol_destroy() function.\n\nThis could be tested in UT. Possibly by extending spdk_lvol_create_clone() stub ?",
      "range": {
        "startLine": 445,
        "startChar": 1,
        "endLine": 445,
        "endChar": 13
      },
      "revId": "7fbfe68536797382e1e81561540a877729688f6f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43a036d5_f07d291b",
        "filename": "test/unit/lib/bdev/vbdev_lvol.c/vbdev_lvol_ut.c",
        "patchSetId": 31
      },
      "lineNbr": 445,
      "author": {
        "id": 1011221
      },
      "writtenOn": "2018-06-21T13:04:38Z",
      "side": 1,
      "message": "\u003e Contrary to another comment (see lvol_ut.c), this return value\n \u003e changes path of vbdev_lvol_destroy() function.\n \u003e \n \u003e This could be tested in UT. Possibly by extending spdk_lvol_create_clone()\n \u003e stub ?\n\nYou don\u0027t agree ? Any comment ?",
      "parentUuid": "a26eeba4_25f33109",
      "range": {
        "startLine": 445,
        "startChar": 1,
        "endLine": 445,
        "endChar": 13
      },
      "revId": "7fbfe68536797382e1e81561540a877729688f6f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8c94a63_5c594885",
        "filename": "test/unit/lib/bdev/vbdev_lvol.c/vbdev_lvol_ut.c",
        "patchSetId": 31
      },
      "lineNbr": 447,
      "author": {
        "id": 1011221
      },
      "writtenOn": "2018-06-20T13:51:40Z",
      "side": 1,
      "message": "The UT in this file only check the explicit path of lvol destruction using vbdev_lvol_destroy(), right ?\n\nWhat about when doing unregister (bdev-\u003edestruct()) ? The vbdev_lvol_unregister() path ?",
      "revId": "7fbfe68536797382e1e81561540a877729688f6f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b021511_0cd8d451",
        "filename": "test/unit/lib/bdev/vbdev_lvol.c/vbdev_lvol_ut.c",
        "patchSetId": 31
      },
      "lineNbr": 447,
      "author": {
        "id": 1011211
      },
      "writtenOn": "2018-06-21T07:08:01Z",
      "side": 1,
      "message": "Isn\u0027t the behaviour of bdev-\u003edestruct() going to be deprecated?",
      "parentUuid": "e8c94a63_5c594885",
      "revId": "7fbfe68536797382e1e81561540a877729688f6f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91f923fd_5147a589",
        "filename": "test/unit/lib/bdev/vbdev_lvol.c/vbdev_lvol_ut.c",
        "patchSetId": 31
      },
      "lineNbr": 447,
      "author": {
        "id": 1011221
      },
      "writtenOn": "2018-06-21T07:35:07Z",
      "side": 1,
      "message": "Don\u0027t think so. Aren\u0027t there is still hot-remove and shutdown cases, which do no delete the lvol on disk but just clean up structures.",
      "parentUuid": "3b021511_0cd8d451",
      "revId": "7fbfe68536797382e1e81561540a877729688f6f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55776e86_589330cb",
        "filename": "test/unit/lib/bdev/vbdev_lvol.c/vbdev_lvol_ut.c",
        "patchSetId": 31
      },
      "lineNbr": 447,
      "author": {
        "id": 1011221
      },
      "writtenOn": "2018-06-21T13:04:38Z",
      "side": 1,
      "message": "\u003e Don\u0027t think so. Aren\u0027t there is still hot-remove and shutdown\n \u003e cases, which do no delete the lvol on disk but just clean up\n \u003e structures.\n\nReading my own comment again, it might have been worder better.\n\nI think the bdev-\u003edestruct() path will not be deprecated, since it is used in hot-remove and shutdown (app or just unloading lvs).\nAm I missing something in this assumption ?",
      "parentUuid": "91f923fd_5147a589",
      "revId": "7fbfe68536797382e1e81561540a877729688f6f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b9c1a2d_63036965",
        "filename": "test/unit/lib/bdev/vbdev_lvol.c/vbdev_lvol_ut.c",
        "patchSetId": 31
      },
      "lineNbr": 447,
      "author": {
        "id": 1011211
      },
      "writtenOn": "2018-06-27T07:21:03Z",
      "side": 1,
      "message": "I agree, I enabled one unit test, but this path of code is something that we might want to change.\nWhen we call bdev-\u003edestruct() we remove the bdev and we are left with unusable lvol. Maybe we should consider adding public calls to lvol layer to at least load it again or free it. I think this should be included in separate patch.",
      "parentUuid": "55776e86_589330cb",
      "revId": "7fbfe68536797382e1e81561540a877729688f6f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d9e0a7c_973d3873",
        "filename": "test/unit/lib/bdev/vbdev_lvol.c/vbdev_lvol_ut.c",
        "patchSetId": 31
      },
      "lineNbr": 447,
      "author": {
        "id": 1011221
      },
      "writtenOn": "2018-06-27T15:43:45Z",
      "side": 1,
      "message": "bdev-\u003edestruct() is called on hot-remove, in case of lvol it means whole lvol store is removed. For shutdown this is the same. I can\u0027t come up with a case where only single lvol is hot-removed.\nException being delete_bdev(). Since that is intended as debug only, so I don\u0027t think it applies here.\n\nI don\u0027t think there is need to expose (either as C API or RPC) lvol loading/unloading separate from whole lvol store.",
      "parentUuid": "3b9c1a2d_63036965",
      "revId": "7fbfe68536797382e1e81561540a877729688f6f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b317fade_25a2b2ba",
        "filename": "test/unit/lib/bdev/vbdev_lvol.c/vbdev_lvol_ut.c",
        "patchSetId": 31
      },
      "lineNbr": 447,
      "author": {
        "id": 1011211
      },
      "writtenOn": "2018-06-29T06:41:17Z",
      "side": 1,
      "message": "Generally I agree, but details are important:\n\nOn lvol layer we assume that lvolstore has information about lvols.\nIn current design we are freeing lvol from memory only when we are deleting it or unloading whole lvolstore.\nspdk_bdev_unregister() called from RPC frees bdev, but leaves lvol in memory until we unload whole lvolstore.\nI think this solutions gives us better flexibility and separates on-disk logic from in-memory logic.\n\nAlternative solution:\nspdk_bdev_unregister() frees lvol, we need to update list of lvols, there is possibility for lvol duplication etc. \nWe need to use separate call for closing bdev in delete_lvol path, because we need a handle to lvol after freeing associated bdev.\n\nWhat do you think?",
      "parentUuid": "8d9e0a7c_973d3873",
      "revId": "7fbfe68536797382e1e81561540a877729688f6f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5322414f_c65dff6a",
        "filename": "test/unit/lib/lvol/lvol.c/lvol_ut.c",
        "patchSetId": 31
      },
      "lineNbr": 232,
      "author": {
        "id": 1011221
      },
      "writtenOn": "2018-06-20T13:51:40Z",
      "side": 1,
      "message": "I see Paul\u0027s point, that this expansion of UT does not add much.\nOn the other hand since spdk_lvol_deletable() is basically just exposing if spdk_blob_get_clones() returns non-zero. It doesn\u0027t have a lot of logic behind it, nor is used within lvol.c.\n\nAt this time spdk_bs_create_clone() might be expanded, so this stub would return proper value. Not sure if this changes the usefulness of this UT anyway.\n\nI\u0027m fine with this staying as is.",
      "range": {
        "startLine": 232,
        "startChar": 0,
        "endLine": 232,
        "endChar": 10
      },
      "revId": "7fbfe68536797382e1e81561540a877729688f6f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}