{
  "comments": [
    {
      "key": {
        "uuid": "c7560436_dc7b8562",
        "filename": "include/spdk/sock.h",
        "patchSetId": 24
      },
      "lineNbr": 65,
      "author": {
        "id": 1016578
      },
      "writtenOn": "2019-12-11T13:18:38Z",
      "side": 1,
      "message": "cool, I see that you have addressed [1] my comments on V20, but you didn\u0027t comment back, which makes it hard to track the review progress? can you please comment back (e.g \"ack\" \"done\" etc) on review feedback?)\n\n\n[1] https://review.gerrithub.io/c/spdk/spdk/+/470523/20/include/spdk/sock.h#62",
      "range": {
        "startLine": 65,
        "startChar": 33,
        "endLine": 65,
        "endChar": 36
      },
      "revId": "bd91f896c793cb8378320955dd36beaa65dd9108",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96f8a18e_a881f56d",
        "filename": "include/spdk/sock.h",
        "patchSetId": 24
      },
      "lineNbr": 65,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-12-11T15:04:32Z",
      "side": 1,
      "message": "Hi Or,\n\nReplying with \"ack\" or \"done\" is done sometimes but not required.  I personally do my own comparison and don\u0027t rely on the \"ack\" or \"done\" and prefer to do a version comparison myself through Gerrit.  (I also don\u0027t typically reply with \"ack\" or \"done\" on comments to my patches.)\n\nFor example, just above the file list, you\u0027ll see Base \u003d\u003e Patchset 24.  You can change Base to Patchset 20.  Then you\u0027ll see what\u0027s changed since Patchset 20, including your comments on that revision.\n\nI personally find this the best way to make sure my comments have been addressed.\n\n-Jim",
      "parentUuid": "c7560436_dc7b8562",
      "range": {
        "startLine": 65,
        "startChar": 33,
        "endLine": 65,
        "endChar": 36
      },
      "revId": "bd91f896c793cb8378320955dd36beaa65dd9108",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe7cf721_9dfcf427",
        "filename": "module/sock/posix/posix.c",
        "patchSetId": 24
      },
      "lineNbr": 590,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-12-11T16:01:33Z",
      "side": 1,
      "message": "should this be \u003e\u003d?\n\nanother optimization here would be to consider if the last flush attempt fully flushed everything - the normal case would be that everything had flushed last time it was attempted, we get several writev_asyncs and then if we get enough iovs batches, we try to flush here\n\nbut if the last flush attempt didn\u0027t fully flush everything, then trying again here doesn\u0027t really help anything - most likely we would have been better off waiting until the next time the sock poller ran",
      "revId": "bd91f896c793cb8378320955dd36beaa65dd9108",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06a115e6_0172f546",
        "filename": "module/sock/posix/posix.c",
        "patchSetId": 24
      },
      "lineNbr": 811,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-12-11T16:01:33Z",
      "side": 1,
      "message": "add a comment here that we need TAILQ_FOREACH_SAFE since it\u0027s possible user will call spdk_sock_group_remove_sock() if an async write failure is sent to the user?",
      "revId": "bd91f896c793cb8378320955dd36beaa65dd9108",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acb30cef_1d35c19a",
        "filename": "module/sock/vpp/vpp.c",
        "patchSetId": 24
      },
      "lineNbr": 974,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-12-11T16:01:33Z",
      "side": 1,
      "message": "this doesn\u0027t seem right - spdk_vpp_sock_writev returns number of bytes written\n\nI\u0027d rather just put an assert here for now - I really don\u0027t think this will work.  we are testing VPP with NVMe/TCP, so the assert would be fine - we\u0027ll just need to have Tomek or someone put a stopgap in here if and when we extend writev_async for iSCSI",
      "revId": "bd91f896c793cb8378320955dd36beaa65dd9108",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}