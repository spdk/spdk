{
  "comments": [
    {
      "key": {
        "uuid": "2762003b_34442855",
        "filename": "lib/ftl/ftl_core.c",
        "patchSetId": 2
      },
      "lineNbr": 955,
      "author": {
        "id": 1015344
      },
      "writtenOn": "2019-06-25T07:11:41Z",
      "side": 1,
      "message": "You could just pass spdk_ftl_dev instead nv_cache.",
      "revId": "df45a0138af5ceae1739a2788e801163672b9100",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "093b4aac_5f65160c",
        "filename": "lib/ftl/ftl_core.c",
        "patchSetId": 2
      },
      "lineNbr": 955,
      "author": {
        "id": 1015368
      },
      "writtenOn": "2019-06-25T07:30:48Z",
      "side": 1,
      "message": "I don\u0027t think there\u0027s any real difference. I even think it\u0027s better to pass ftl_nv_cache here, as the pattern for most of the other ftl_nv_cache* functions is to pass ftl_nv_cache.",
      "parentUuid": "2762003b_34442855",
      "revId": "df45a0138af5ceae1739a2788e801163672b9100",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64325782_135ae579",
        "filename": "lib/ftl/ftl_core.c",
        "patchSetId": 2
      },
      "lineNbr": 955,
      "author": {
        "id": 1015344
      },
      "writtenOn": "2019-06-25T07:50:38Z",
      "side": 1,
      "message": "We are not using such pattern in FTL, this is just static function in core module, I don\u0027t see any benefit of this.",
      "parentUuid": "093b4aac_5f65160c",
      "revId": "df45a0138af5ceae1739a2788e801163672b9100",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fd9db60_ad01b4d9",
        "filename": "lib/ftl/ftl_core.c",
        "patchSetId": 2
      },
      "lineNbr": 955,
      "author": {
        "id": 1015368
      },
      "writtenOn": "2019-06-25T08:24:01Z",
      "side": 1,
      "message": "We *do* have this pattern in FTL code - if the function is operating on ftl_band, we\u0027re passing ftl_band, if it\u0027s in ftl_reloc - we pass ftl_reloc.",
      "parentUuid": "64325782_135ae579",
      "revId": "df45a0138af5ceae1739a2788e801163672b9100",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7afe7607_364fb1c2",
        "filename": "lib/ftl/ftl_core.c",
        "patchSetId": 2
      },
      "lineNbr": 955,
      "author": {
        "id": 1015344
      },
      "writtenOn": "2019-06-25T08:34:18Z",
      "side": 1,
      "message": "So add ftl_dev to nv_cache struct if you want to be consistent.",
      "parentUuid": "3fd9db60_ad01b4d9",
      "revId": "df45a0138af5ceae1739a2788e801163672b9100",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0212cb5d_5ffda9f1",
        "filename": "lib/ftl/ftl_core.c",
        "patchSetId": 2
      },
      "lineNbr": 955,
      "author": {
        "id": 1015368
      },
      "writtenOn": "2019-06-25T08:47:40Z",
      "side": 1,
      "message": "There\u0027s no need to add spdk_ftl_dev to ftl_nv_cache - that\u0027s one to one relation. For e.g. bands we need to have a pointer to the device it\u0027s part of, because there are multiple bands and it isn\u0027t possible to easily get the device out of that. What\u0027s wrong with SPDK_CONTAINEROF?",
      "parentUuid": "7afe7607_364fb1c2",
      "revId": "df45a0138af5ceae1739a2788e801163672b9100",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e403a69_29f28992",
        "filename": "lib/ftl/ftl_core.c",
        "patchSetId": 2
      },
      "lineNbr": 1018,
      "author": {
        "id": 1015344
      },
      "writtenOn": "2019-06-25T07:11:41Z",
      "side": 1,
      "message": "Can we just get this pool during ftl_io_alloc and put it in ftl_io_free?",
      "revId": "df45a0138af5ceae1739a2788e801163672b9100",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "995953d7_c9ad5d42",
        "filename": "lib/ftl/ftl_core.c",
        "patchSetId": 2
      },
      "lineNbr": 1018,
      "author": {
        "id": 1015368
      },
      "writtenOn": "2019-06-25T07:30:48Z",
      "side": 1,
      "message": "No, because it\u0027s not tied to every IO. It only makes sense to do that for the IOs that go to the non-volatile cache.",
      "parentUuid": "5e403a69_29f28992",
      "revId": "df45a0138af5ceae1739a2788e801163672b9100",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7468b9b4_62833fe0",
        "filename": "lib/ftl/ftl_core.c",
        "patchSetId": 2
      },
      "lineNbr": 1018,
      "author": {
        "id": 1015344
      },
      "writtenOn": "2019-06-25T07:50:38Z",
      "side": 1,
      "message": "We have already ftl_io_init_internal() which set io-\u003emd. This allocation should take place somwhere in  ftl_alloc_io_nv_cache not in ftl_reserve_nv_cache()",
      "parentUuid": "995953d7_c9ad5d42",
      "revId": "df45a0138af5ceae1739a2788e801163672b9100",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e48dc42_ace99fc1",
        "filename": "lib/ftl/ftl_core.c",
        "patchSetId": 2
      },
      "lineNbr": 1018,
      "author": {
        "id": 1015368
      },
      "writtenOn": "2019-06-25T08:24:01Z",
      "side": 1,
      "message": "I don\u0027t think there are any advantages in moving this to ftl_alloc_io_nv_cache. First of all, you\u0027d have to free it in one more place - in case ftl_reserve_nv_cache wasn\u0027t able to reserve anything. Secondly, a function called ftl_reserve_nv_cache reserving all the necessary resources related to the non-volatile cache (whether it\u0027s space on the device or metadata buffer) makes sense.",
      "parentUuid": "7468b9b4_62833fe0",
      "revId": "df45a0138af5ceae1739a2788e801163672b9100",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5988229b_7c24f4aa",
        "filename": "lib/ftl/ftl_core.c",
        "patchSetId": 2
      },
      "lineNbr": 1018,
      "author": {
        "id": 1015344
      },
      "writtenOn": "2019-06-25T08:34:18Z",
      "side": 1,
      "message": "io-\u003emd is related to our internal FTL resources just like our io pool. We should alloc/free internal io buffers in our IO related functions and ftl_alloc_io_nv_cache() looks like good candidate for that.",
      "parentUuid": "9e48dc42_ace99fc1",
      "revId": "df45a0138af5ceae1739a2788e801163672b9100",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce04d6e9_716aa1ac",
        "filename": "lib/ftl/ftl_core.c",
        "patchSetId": 2
      },
      "lineNbr": 1018,
      "author": {
        "id": 1015368
      },
      "writtenOn": "2019-06-25T08:47:40Z",
      "side": 1,
      "message": "Making the allocations / frees more scattered certainly isn\u0027t a good idea. And it isn\u0027t true that we allocate internal IO buffers in our IO related functions - the data buffers going to the OC device, passed down to the IO functions are always already allocated (for regular writes: from rwb, for metadata writes: buffer tied to a band, for reads: user allocated).",
      "parentUuid": "5988229b_7c24f4aa",
      "revId": "df45a0138af5ceae1739a2788e801163672b9100",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87cb84d6_df2e78aa",
        "filename": "lib/ftl/ftl_core.c",
        "patchSetId": 2
      },
      "lineNbr": 1092,
      "author": {
        "id": 1015344
      },
      "writtenOn": "2019-06-25T07:11:41Z",
      "side": 1,
      "message": "You should return md to pool here.",
      "revId": "df45a0138af5ceae1739a2788e801163672b9100",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3702834_d8cafff1",
        "filename": "lib/ftl/ftl_core.c",
        "patchSetId": 2
      },
      "lineNbr": 1092,
      "author": {
        "id": 1015344
      },
      "writtenOn": "2019-06-25T07:14:56Z",
      "side": 1,
      "message": "Ok, I see that FTL_LBA_INVALID is return when allocation fails - but it not so intuitive.",
      "parentUuid": "87cb84d6_df2e78aa",
      "revId": "df45a0138af5ceae1739a2788e801163672b9100",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cecf4d6e_ecef32de",
        "filename": "lib/ftl/ftl_core.c",
        "patchSetId": 2
      },
      "lineNbr": 1092,
      "author": {
        "id": 1015368
      },
      "writtenOn": "2019-06-25T07:30:48Z",
      "side": 1,
      "message": "FTL_LBA_INVALID indicates that the function wasn\u0027t able to reserve space within the non-volatile cache. It\u0027s a pretty standard behavior not to allocate anything in case of failure.",
      "parentUuid": "c3702834_d8cafff1",
      "revId": "df45a0138af5ceae1739a2788e801163672b9100",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}