{
  "comments": [
    {
      "key": {
        "uuid": "6b5c9734_257b0bc7",
        "filename": "lib/bdev/crypto/vbdev_crypto.c",
        "patchSetId": 2
      },
      "lineNbr": 633,
      "author": {
        "id": 1011289
      },
      "writtenOn": "2019-07-26T15:19:57Z",
      "side": 1,
      "message": "So we actually don\u0027t *need* this memset.  The crypto_ops array of pointers will get populated with rte_crypto_op_bulk_alloc() and when freed they should be cleared.  I haven\u0027t tested it but can if you\u0027d like me to. This stuff below is yucky :)",
      "revId": "9fefbde7873ac4bf90c74f383d44a7aeb840131c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0cadd75_40154e15",
        "filename": "lib/bdev/crypto/vbdev_crypto.c",
        "patchSetId": 2
      },
      "lineNbr": 633,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-07-26T15:33:07Z",
      "side": 1,
      "message": "I doubt just removing the memset would work, but I\u0027ll try it on my system.\n\nThe other option would be to put the __clang_analyzer__ ifdef around the rte_crypto.h #include.  That was the direction I was originally thinking to avoid any ugly hacks.",
      "parentUuid": "6b5c9734_257b0bc7",
      "revId": "9fefbde7873ac4bf90c74f383d44a7aeb840131c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f46a5346_ef798f05",
        "filename": "lib/bdev/crypto/vbdev_crypto.c",
        "patchSetId": 2
      },
      "lineNbr": 633,
      "author": {
        "id": 1011218
      },
      "writtenOn": "2019-07-26T16:00:27Z",
      "side": 1,
      "message": "The memset was added to avoid a \"garbage value read\" false positive in the first place.\n\n... and it was sufficient to silence scan-build until we redefined TAILQ_REMOVE. After we redefine it, scan-build starts complaining about null pointer dereference.",
      "parentUuid": "d0cadd75_40154e15",
      "revId": "9fefbde7873ac4bf90c74f383d44a7aeb840131c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e04b38b_09b1eb7f",
        "filename": "lib/bdev/crypto/vbdev_crypto.c",
        "patchSetId": 2
      },
      "lineNbr": 633,
      "author": {
        "id": 1011218
      },
      "writtenOn": "2019-07-26T16:02:38Z",
      "side": 1,
      "message": "I\u0027m not sure I follow the #include idea. If we skip the header, how will the compilation succeed?",
      "parentUuid": "f46a5346_ef798f05",
      "revId": "9fefbde7873ac4bf90c74f383d44a7aeb840131c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb34c825_167f02d8",
        "filename": "lib/bdev/crypto/vbdev_crypto.c",
        "patchSetId": 2
      },
      "lineNbr": 633,
      "author": {
        "id": 1011289
      },
      "writtenOn": "2019-07-26T21:55:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6e04b38b_09b1eb7f",
      "revId": "9fefbde7873ac4bf90c74f383d44a7aeb840131c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc775118_fe1dfcb1",
        "filename": "lib/bdev/crypto/vbdev_crypto.c",
        "patchSetId": 2
      },
      "lineNbr": 633,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-07-26T22:23:45Z",
      "side": 1,
      "message": "Hmmm - I misunderstood how scan-build used this __clang_analyzer__ token.\n\nThe compilation still succeeds (since it would be a #ifndef) but scan-build just doesn\u0027t read the header file when doing the static analysis.  I thought it would at least read the file but just not report any errors on code in that file.\n\nWhat if instead you just did:\n\n#ifndef __clang_analyzer__\nallocated \u003d rte_crypto_op_blah_blah_blah...;\n#else\nallocated \u003d cryop_cnt;\n#endif\n\nWell, no - that doesn\u0027t work either.  It still think crypto_ops didn\u0027t get initialized.  It also throws an error on the src_mbufs array.\n\nMaybe this is the \u0027best\u0027 solution for now.  I\u0027d still like to think about it some more though.  This is really nasty.  I\u0027m going to file an LLVM bug on this regression too.",
      "parentUuid": "fb34c825_167f02d8",
      "revId": "9fefbde7873ac4bf90c74f383d44a7aeb840131c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab83d367_3dabdbeb",
        "filename": "lib/bdev/crypto/vbdev_crypto.c",
        "patchSetId": 2
      },
      "lineNbr": 633,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-07-26T22:35:26Z",
      "side": 1,
      "message": "Instead of dummy_buf, can you just make it a struct rte_crypto_op?  That seemed to work on my system.\n\nI didn\u0027t need the do/while either.\n\nWhat a pain.",
      "parentUuid": "cc775118_fe1dfcb1",
      "revId": "9fefbde7873ac4bf90c74f383d44a7aeb840131c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4dcd6608_a087d14b",
        "filename": "lib/bdev/crypto/vbdev_crypto.c",
        "patchSetId": 2
      },
      "lineNbr": 633,
      "author": {
        "id": 1011218
      },
      "writtenOn": "2019-07-27T15:14:41Z",
      "side": 1,
      "message": "I can\u0027t do that either -\nThe object here is supposed to have additional space at the end of struct rte_crypto_op, which is also memset by rte_crypto_op_bulk_alloc. I have to setup a buffer with at least sizeof(struct rte_crypto_op) + sizeof(struct rte_crypto_sym_op) and it was just easier to setup a buffer with size 0x1000, which is way above that.",
      "parentUuid": "ab83d367_3dabdbeb",
      "revId": "9fefbde7873ac4bf90c74f383d44a7aeb840131c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}