{
  "comments": [
    {
      "key": {
        "uuid": "602b48e7_06b10c64",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 4,
      "author": {
        "id": 1011289
      },
      "writtenOn": "2018-10-27T22:03:32Z",
      "side": 1,
      "message": "I think you need a high level explanation of how this library/algorithm maps to something that actually does the compression, like what we\u0027ll be starting off with at least using CompressDev.  For a new person reading this, I think they will get lost pretty quick without getting \"the big picture\" first",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "157df130_d540fa65",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 4,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-11-01T00:13:36Z",
      "side": 1,
      "message": "Ack.  I wrote this doc originally for a different audience - you\u0027re right it needs some big picture stuff now that it\u0027s getting merged into SPDK.",
      "parentUuid": "602b48e7_06b10c64",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d83aad80_225c2633",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 6,
      "author": {
        "id": 1011289
      },
      "writtenOn": "2018-10-27T22:03:32Z",
      "side": 1,
      "message": "we should probably have some short description/link or something here to SNIA PM instead of assuming everyone will know that this is - but they should by now :)",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26515038_5a4ec087",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 6,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-11-01T00:13:36Z",
      "side": 1,
      "message": "I\u0027ll trust that anyone who doesn\u0027t know what persistent memory is can google it.  :)",
      "parentUuid": "d83aad80_225c2633",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "93af7add_0d513482",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 6,
      "author": {
        "id": 1015365
      },
      "writtenOn": "2018-11-01T23:36:15Z",
      "side": 1,
      "message": "Also, can you please make it clear if the solution is intended to work without PM? For systems that don\u0027t have PM, will the design allow such compression offload to work simply with DDR4? Our system may not have PM support for a bit. So hosting the metadata in another SSD or DDR4 would help a lot.",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3817d6d9_53a1a4e4",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 6,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-11-02T16:08:32Z",
      "side": 1,
      "message": "For volatile DRAM, you could create a pmem pool on a ramdisk.  The Linux kernel provides a method I believe to create \"fake\" persistent memory from DRAM.  Of course that data won\u0027t be persistent.\n\nPMDK also supports using files that are not backed by persistent memory.  Performance will suffer of course, since syncs will require writing a full sector to disk.",
      "parentUuid": "93af7add_0d513482",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d405d0c4_c9098c27",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1015365
      },
      "writtenOn": "2018-11-01T23:36:15Z",
      "side": 1,
      "message": "First off, thank you Jim for the excellent doc. It explained the concepts really well, cannot thank you enough for such a nice doc. I have some minor nit comments.\n\nI maybe wrong but one of the main points that I understood of this feature was the ability to offload some of the storage features onto other assist-devices (mostly separate hardware). So the reduce feature allows for offloading of storage-compression to other hardware, in an attempt to reduce host-side cpu/resource(s) consumption and free up host resources for other tasks. If that is the case, maybe it would help to make it clear and explicit right at the beginning.",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a3c0823_3a6885ed",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-11-02T16:08:32Z",
      "side": 1,
      "message": "The next version of this doc will talk a bit about the compression offloading.",
      "parentUuid": "d405d0c4_c9098c27",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7bfb513_8ae077aa",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1015365
      },
      "writtenOn": "2018-11-06T21:20:08Z",
      "side": 1,
      "message": "Surely that would help.",
      "parentUuid": "6a3c0823_3a6885ed",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47651190_f3b90d62",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1011289
      },
      "writtenOn": "2018-10-27T22:03:32Z",
      "side": 1,
      "message": "I\u0027d consider IO instead of io throughout",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cdf30aeb_ed8f98c6",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-11-01T00:13:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "47651190_f3b90d62",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4fd3a10_cf4371df",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1015365
      },
      "writtenOn": "2018-11-01T23:36:15Z",
      "side": 1,
      "message": "Nit : If N backing IO units are associated with each chunk, then this should be 0 to N-1.",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e12795c_0a99f926",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-11-02T16:08:32Z",
      "side": 1,
      "message": "Good catch!",
      "parentUuid": "b4fd3a10_cf4371df",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abd46f5a_25b69f39",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1015365
      },
      "writtenOn": "2018-11-01T23:36:15Z",
      "side": 1,
      "message": "Sorry another Nit : if it is not too late and if it is still possible to use some easily referenced term for \"Backing IO unit\", it\u0027d be welcome. Or maybe it is a matter of me getting used to saying that repeatedly :-) Something like bsPage or something easier maybe helpful.",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c15fbb9a_cf9eb5ce",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-11-02T16:08:32Z",
      "side": 1,
      "message": "We used to use the term \"page\" in blobstore, and recently changed it to IO unit.  Page usually infers 4KB, and while that matches the example here, there are cases where we may want to pick a different IO unit size.  For example, there may be SSDs in the future that are optimized for 16KB writes instead of 4KB writes - in those cases we may want to pick a 16KB IO size.",
      "parentUuid": "abd46f5a_25b69f39",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f34079bc_8ed63c00",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1015365
      },
      "writtenOn": "2018-11-06T21:20:08Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c15fbb9a_cf9eb5ce",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f288a82_2dcdc625",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1011289
      },
      "writtenOn": "2018-10-27T22:03:32Z",
      "side": 1,
      "message": "maybe spell the word \"two\" or do a \"2 x 4KB\"",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e02a9ea_53239c24",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-11-01T00:13:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1f288a82_2dcdc625",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b9c9b8d_41d3e6ca",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1011289
      },
      "writtenOn": "2018-10-27T22:03:32Z",
      "side": 1,
      "message": "Can other values be used? If not I\u0027d remove the \"for example\"",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "608aa95d_b2ed4ab0",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-11-01T00:13:36Z",
      "side": 1,
      "message": "Ack - yeah, now that this really describes the implementation (and not just the general idea), I can put in specifics.",
      "parentUuid": "1b9c9b8d_41d3e6ca",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "528225ab_f367fae6",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 136,
      "author": {
        "id": 1015365
      },
      "writtenOn": "2018-11-01T23:36:15Z",
      "side": 1,
      "message": "Why is this necessary or important? ie. copying the 4KB incoming data to offset 8KB of this temp buffer? Does it make a difference if it is simply occupying the lowest (LSB + 4K) region of the buffer before being used for compression and the result copied to the dest buffer?",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e855b6b_f4d51a45",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 136,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-11-02T16:08:32Z",
      "side": 1,
      "message": "Yes - the offset definitely matters.  If we later read 4KB from offset 8KB, we need to get this same data back.  Maybe I\u0027m not understanding your question.",
      "parentUuid": "528225ab_f367fae6",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e54e00e_3b5b77c4",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 136,
      "author": {
        "id": 1015365
      },
      "writtenOn": "2018-11-06T21:20:08Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4e855b6b_f4d51a45",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b461e77_2cf44837",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 178,
      "author": {
        "id": 1015365
      },
      "writtenOn": "2018-11-01T23:36:15Z",
      "side": 1,
      "message": "I maybe missing something here, so this is not a comment really. Rather trying to understand how this works: 1. The initial data read from blocking-io-unit 2 was 4KB. So when decompressed it should probably expand to something \u003e\u003d 4KB. Let us say it decompresses to 8KB. So when we try to write this 8KB into the allocated 16KB buffer (which is made of four 4KB units) where do we copy this 8KB which takes up 2 4KB units. My point is, if we copy this to the units 0 and 1 then that itself takes up till offset 8K of the allocated buffer. Then how do we copy the incoming 4K of data to offset 4KB of the uncompressed buffer. I think I am missing something here, so any input will help. Thanks.",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c5d80e9_cf770dd2",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 178,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-11-02T16:08:32Z",
      "side": 1,
      "message": "When backing IO unit 2 is decompressed, it will decompress to exactly 16KB.  It\u0027s the same 16KB that we compressed above.  This 16KB consists of (4KB zeroes, 4KB zeroes, 4KB user data, 4KB zeroes).  Then here we will overwrite the second 4KB of zeroes with the incoming data from the user.",
      "parentUuid": "0b461e77_2cf44837",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6dfc4d61_c352c07d",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 178,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-11-02T16:08:32Z",
      "side": 1,
      "message": "Whenever we decompress the backing IO units related to a chunk, it will *always* decompress to the chunk size.  When this backing IO unit was written out, we started with 16KB of data (4KB of zeroes, 4KB of zeroes, 4KB of user data, 4KB of zeroes) which we were able to compress to 3KB.  When we decompress this 3KB here, we\u0027ll get back the original 16KB of data.",
      "parentUuid": "0b461e77_2cf44837",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e7efaeb_a352dc54",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 178,
      "author": {
        "id": 1015365
      },
      "writtenOn": "2018-11-06T21:20:08Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6dfc4d61_c352c07d",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4841d4c_2f5f4d72",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 187,
      "author": {
        "id": 1015365
      },
      "writtenOn": "2018-11-02T00:17:20Z",
      "side": 1,
      "message": "So the write op itself can be acknowledged back to the application or considered complete only after the final step on line 190? I assume that instead of a power failure at this point, if there is a context switch for the thread doing the write of [3 4 X X] to chunk-map 2, that is more implementation specific (where atomicity of the md-updates etc. are all taken care of).\n\nI am yet to work through other examples of when a competing write/read comes in for this particular example. ie. a competing \"Write 8KB comes in at Offset 4KB\" at the exact same moment that the write in this example (Line 168) does. Just want to make sure there are no inconsistencies in those cases.",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cafbc8f_888dd0a1",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 187,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-11-02T16:08:32Z",
      "side": 1,
      "message": "It can be acknowledge after we write chunk map 2 to entry 0 on line 188.  Lines 189 and 190 can be done afterwards.  If the system crashes after line 188, the restart algorithm will figure out that chunk map 1 and backing io unit 2 are no longer in use.",
      "parentUuid": "c4841d4c_2f5f4d72",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df0f4a76_4da3a813",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 187,
      "author": {
        "id": 1015365
      },
      "writtenOn": "2018-11-06T21:20:08Z",
      "side": 1,
      "message": "Thanks for the explanations Jim. Mostly makes sense to me.",
      "parentUuid": "2cafbc8f_888dd0a1",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5dd99b69_93c0c4de",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 222,
      "author": {
        "id": 1011289
      },
      "writtenOn": "2018-10-27T22:03:32Z",
      "side": 1,
      "message": "I assume it will also send an actual unmap to the backing device?",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3cd844a7_c969590c",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 222,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-11-01T00:13:36Z",
      "side": 1,
      "message": "Eventually.  Not for the initial implementation though.  And I think it might be done better as a background operation rather than inline - since unmap operations will result in freeing a bunch of potentially contiguous 4KB blocks on disk, and 4KB unmaps suck from a performance perspective.",
      "parentUuid": "5dd99b69_93c0c4de",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7d11d56_e58a5c78",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 242,
      "author": {
        "id": 1011289
      },
      "writtenOn": "2018-10-27T22:03:32Z",
      "side": 1,
      "message": "Maybe define what \"restart\" means.  System reboot, SPDK application stop/start, is there some other level of load/unload?",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a00a479_31dd116c",
        "filename": "doc/compression.md",
        "patchSetId": 4
      },
      "lineNbr": 242,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-11-01T00:13:36Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "f7d11d56_e58a5c78",
      "revId": "b3452df71beeda7d17b5cdee7928da9406b033e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}