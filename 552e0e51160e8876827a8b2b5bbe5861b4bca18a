{
  "comments": [
    {
      "key": {
        "uuid": "31a84ae9_e5f9551f",
        "filename": "test/unit/lib/bdev/bdev.c/bdev_ut.c",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2020-01-03T17:07:23Z",
      "side": 1,
      "message": "Code looks good, but let\u0027s put it immediately after the code for IO_TYPE_READ and IO_TYPE_WRITE closer to the beginning of this function.",
      "revId": "552e0e51160e8876827a8b2b5bbe5861b4bca18a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b59e355_9b016787",
        "filename": "test/unit/lib/bdev/bdev.c/bdev_ut.c",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 1011262
      },
      "writtenOn": "2020-01-07T10:36:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "31a84ae9_e5f9551f",
      "revId": "552e0e51160e8876827a8b2b5bbe5861b4bca18a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b5fd8de_c019534d",
        "filename": "test/unit/lib/bdev/bdev.c/bdev_ut.c",
        "patchSetId": 2
      },
      "lineNbr": 2205,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2020-01-03T17:07:23Z",
      "side": 1,
      "message": "Isn\u0027t this pretty much an exact copy of bdev_compare_emulated?",
      "revId": "552e0e51160e8876827a8b2b5bbe5861b4bca18a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22bcfdda_f6eeb86e",
        "filename": "test/unit/lib/bdev/bdev.c/bdev_ut.c",
        "patchSetId": 2
      },
      "lineNbr": 2205,
      "author": {
        "id": 1011262
      },
      "writtenOn": "2020-01-07T10:36:23Z",
      "side": 1,
      "message": "It\u0027s very similar, but in emulated version we disable support for compare operation (g_io_types_supported[SPDK_BDEV_IO_TYPE_COMPARE] \u003d false) and we have different expected IO (expected_io \u003d ut_alloc_expected_io(SPDK_BDEV_IO_TYPE_COMPARE... vs SPDK_BDEV_IO_TYPE_READ).",
      "parentUuid": "9b5fd8de_c019534d",
      "revId": "552e0e51160e8876827a8b2b5bbe5861b4bca18a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d44c4431_478bf971",
        "filename": "test/unit/lib/bdev/bdev.c/bdev_ut.c",
        "patchSetId": 2
      },
      "lineNbr": 2205,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2020-01-07T19:39:38Z",
      "side": 1,
      "message": "But most of the code is the exact same.  I would have liked to see something to reduce that duplication.  Something like:\n\nstatic void\n_bdev_compare(bool emulated)\n{\n  g_io_types_supported[COMPARE] \u003d !emulated;\n\n  if (emulated) {\n    expected_io \u003d ut_alloc_expected_io(IO_TYPE_READ);\n  } else {\n    expected_io \u003d ut_alloc_expected_io(IO_TYPE_COMPARE);\n  }\n}\n\nstatic void\nbdev_compare(void)\n{\n  _bdev_compare(true);\n  _bdev_compare(false);\n}\n\nThat\u0027s not exact but I think you get the idea.",
      "parentUuid": "22bcfdda_f6eeb86e",
      "revId": "552e0e51160e8876827a8b2b5bbe5861b4bca18a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a37a4cee_72a263db",
        "filename": "test/unit/lib/bdev/bdev.c/bdev_ut.c",
        "patchSetId": 2
      },
      "lineNbr": 2205,
      "author": {
        "id": 1011262
      },
      "writtenOn": "2020-01-09T13:17:24Z",
      "side": 1,
      "message": "I\u0027ve created separate patch before that one that changes the logic to above.",
      "parentUuid": "d44c4431_478bf971",
      "revId": "552e0e51160e8876827a8b2b5bbe5861b4bca18a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}