{
  "comments": [
    {
      "key": {
        "uuid": "880b8b5c_e751399a",
        "filename": "lib/iscsi/conn.c",
        "patchSetId": 31
      },
      "lineNbr": 314,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-11-26T20:03:41Z",
      "side": 1,
      "message": "this is part of the patch that I\u0027m not sure about - previously we were checking task-\u003escsi.status but now we are not\n\nalso above, we would check bhs.flags, and now we are not\n\ncoverage data indicates our unit tests aren\u0027t hitting this path at all - due to all of the intermittent failures we\u0027re seeing around iscsi and hot plug and large I/O, it would be great to try to improve our unit test coverage in these areas",
      "revId": "7e61fe809b52bdf1b6516cd7595c62a7dd3579ea",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3955b275_ee01bfbc",
        "filename": "lib/iscsi/conn.c",
        "patchSetId": 31
      },
      "lineNbr": 314,
      "author": {
        "id": 1011275
      },
      "writtenOn": "2019-11-27T01:36:43Z",
      "side": 1,
      "message": "Hi Jim,\n\nThis case is already handled in other functions. So it is correct. You can see the original code, is used to decrease the data_in_cnt for the primary task. But in the new code, there is no counting data_in_cnt for the primary task. And there the primary read task is not executed in the scsi layer, and there is no deferred read primary task free, so why we need this code here?",
      "parentUuid": "880b8b5c_e751399a",
      "revId": "7e61fe809b52bdf1b6516cd7595c62a7dd3579ea",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a048cda0_53937ebd",
        "filename": "lib/iscsi/conn.c",
        "patchSetId": 31
      },
      "lineNbr": 314,
      "author": {
        "id": 1011275
      },
      "writtenOn": "2019-11-27T02:05:58Z",
      "side": 1,
      "message": "The primary task free now is handled in: process_read_task_completion. Until all subtasks are finishes (either fails or succeeds), then it will be freed. So the primary read task free is only in one space, and it handles all the case.",
      "parentUuid": "3955b275_ee01bfbc",
      "revId": "7e61fe809b52bdf1b6516cd7595c62a7dd3579ea",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8de2690_d1edd846",
        "filename": "test/unit/lib/iscsi/conn.c/conn_ut.c",
        "patchSetId": 31
      },
      "lineNbr": 216,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-11-27T08:58:55Z",
      "side": 1,
      "message": "How about the following?\n\nstruct spdk_iscsi_task *g_ut_read_primary;\nTAILQ_HEAD(read_subtasks_head, spdk_iscsi_task) g_ut_read_subtasks;\n\nEnqueue only subtasks into TAILQ.\n\nThis may require not small change but clarified the intention",
      "revId": "7e61fe809b52bdf1b6516cd7595c62a7dd3579ea",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}