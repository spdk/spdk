{
  "comments": [
    {
      "key": {
        "uuid": "18235b4b_897e89f5",
        "filename": "lib/bdev/ocf/vbdev_ocf.c",
        "patchSetId": 1
      },
      "lineNbr": 342,
      "author": {
        "id": 1014935
      },
      "writtenOn": "2019-08-21T08:40:02Z",
      "side": 1,
      "message": "Update comment to reflect difference between two paths",
      "range": {
        "startLine": 342,
        "startChar": 3,
        "endLine": 342,
        "endChar": 38
      },
      "revId": "3199e6a4dd56ffa7b32f4e122abafae00f67f0e4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7950ad2c_25efba27",
        "filename": "lib/bdev/ocf/vbdev_ocf.c",
        "patchSetId": 1
      },
      "lineNbr": 342,
      "author": {
        "id": 1016851
      },
      "writtenOn": "2019-08-21T17:28:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "18235b4b_897e89f5",
      "range": {
        "startLine": 342,
        "startChar": 3,
        "endLine": 342,
        "endChar": 38
      },
      "revId": "3199e6a4dd56ffa7b32f4e122abafae00f67f0e4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d97006e_9eb261a0",
        "filename": "lib/bdev/ocf/vbdev_ocf.c",
        "patchSetId": 1
      },
      "lineNbr": 355,
      "author": {
        "id": 1014935
      },
      "writtenOn": "2019-08-21T08:40:02Z",
      "side": 1,
      "message": "Update comment to reflect difference between two paths",
      "range": {
        "startLine": 355,
        "startChar": 3,
        "endLine": 355,
        "endChar": 38
      },
      "revId": "3199e6a4dd56ffa7b32f4e122abafae00f67f0e4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b624c04_99cc651e",
        "filename": "lib/bdev/ocf/vbdev_ocf.c",
        "patchSetId": 1
      },
      "lineNbr": 355,
      "author": {
        "id": 1016851
      },
      "writtenOn": "2019-08-21T17:28:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1d97006e_9eb261a0",
      "range": {
        "startLine": 355,
        "startChar": 3,
        "endLine": 355,
        "endChar": 38
      },
      "revId": "3199e6a4dd56ffa7b32f4e122abafae00f67f0e4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e710807_46c4e2b7",
        "filename": "lib/bdev/ocf/vbdev_ocf.c",
        "patchSetId": 1
      },
      "lineNbr": 377,
      "author": {
        "id": 1014935
      },
      "writtenOn": "2019-08-21T08:40:02Z",
      "side": 1,
      "message": "As per comment in vbdev_ocf.h, we should be able to move this check and following vbdev_ocf_mngt_start() up to vbdev_ocf_delete() and vbdev_ocf_delete_clean() so that we don\u0027t have to add implicit state to vbdev",
      "range": {
        "startLine": 376,
        "startChar": 1,
        "endLine": 377,
        "endChar": 51
      },
      "revId": "3199e6a4dd56ffa7b32f4e122abafae00f67f0e4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0c2a75f_de787c23",
        "filename": "lib/bdev/ocf/vbdev_ocf.c",
        "patchSetId": 1
      },
      "lineNbr": 377,
      "author": {
        "id": 1016851
      },
      "writtenOn": "2019-08-21T17:28:13Z",
      "side": 1,
      "message": "If I understand correctly we can\u0027t trigger removing of device (vbdev_ocf_mngt_start()) as long as ocf bdev is visible in bdev lists, because other bdevs can issuing io to our device and we can stuck here for ages, am I right? If yes, first step to remove ocf instance is call \nspdk_bdev_unregister, and then whole path is common for both dirty and clean shutdown, so we need something to distinguish which management path we should call in unregister_cb.",
      "parentUuid": "8e710807_46c4e2b7",
      "range": {
        "startLine": 376,
        "startChar": 1,
        "endLine": 377,
        "endChar": 51
      },
      "revId": "3199e6a4dd56ffa7b32f4e122abafae00f67f0e4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d710ea35_ef0ed3d0",
        "filename": "lib/bdev/ocf/vbdev_ocf.c",
        "patchSetId": 1
      },
      "lineNbr": 377,
      "author": {
        "id": 1014935
      },
      "writtenOn": "2019-08-23T07:31:42Z",
      "side": 1,
      "message": "Yes, unregister can last really long because all descriptors must be closed manually before we get to unregister_cb(), but those who are responsible for closing should respect the fact that bdev is not in READY state.\nBut I don\u0027t see how that is connected to vbdev_ocf_mngt_start(), the only thing calling it will change is that concurrent management operation during unregister will be rejected by vbdev_ocf_mngt_* interface, but that is ok.\nSo what is the problem with using vbdev_ocf_mngt_start() for a long operation like this?",
      "parentUuid": "a0c2a75f_de787c23",
      "range": {
        "startLine": 376,
        "startChar": 1,
        "endLine": 377,
        "endChar": 51
      },
      "revId": "3199e6a4dd56ffa7b32f4e122abafae00f67f0e4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2f9d951_153a31f8",
        "filename": "lib/bdev/ocf/vbdev_ocf.c",
        "patchSetId": 1
      },
      "lineNbr": 437,
      "author": {
        "id": 1014935
      },
      "writtenOn": "2019-08-21T08:40:02Z",
      "side": 1,
      "message": "when cache is not started, order of detachments should not matter at all. Can we skip adding two different functions for this?",
      "range": {
        "startLine": 436,
        "startChar": 1,
        "endLine": 437,
        "endChar": 34
      },
      "revId": "3199e6a4dd56ffa7b32f4e122abafae00f67f0e4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5ad0415_b0913153",
        "filename": "lib/bdev/ocf/vbdev_ocf.c",
        "patchSetId": 1
      },
      "lineNbr": 437,
      "author": {
        "id": 1016851
      },
      "writtenOn": "2019-08-22T12:09:30Z",
      "side": 1,
      "message": "I think that we should have the same approach to handle clean/dirty shutdown regardless state of cache. These two function aren\u0027t consuming many lines, so my recommendation is leave this as is in this patch for better predictability behavior of rpc delete command.",
      "parentUuid": "b2f9d951_153a31f8",
      "range": {
        "startLine": 436,
        "startChar": 1,
        "endLine": 437,
        "endChar": 34
      },
      "revId": "3199e6a4dd56ffa7b32f4e122abafae00f67f0e4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40b65366_1247cae9",
        "filename": "lib/bdev/ocf/vbdev_ocf.c",
        "patchSetId": 1
      },
      "lineNbr": 437,
      "author": {
        "id": 1014935
      },
      "writtenOn": "2019-08-23T07:31:42Z",
      "side": 1,
      "message": "I am ok with leaving as is, but I am still not sure if this gives us more predictable behaviour.\nI think that the value of having same approach would be greater if paths with different vbdev-\u003estarted were more simillar, but they are very different regardless of approach. For instance, neither ocf cache nor core are actually touched if vbdev-\u003estarted \u003d\u003d false because ocf cache was not loaded or created. If vbdev-\u003estarted \u003d\u003d false, we basically modify only the internal structures of this module.",
      "parentUuid": "f5ad0415_b0913153",
      "range": {
        "startLine": 436,
        "startChar": 1,
        "endLine": 437,
        "endChar": 34
      },
      "revId": "3199e6a4dd56ffa7b32f4e122abafae00f67f0e4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bed65c97_f7150812",
        "filename": "lib/bdev/ocf/vbdev_ocf.h",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1014935
      },
      "writtenOn": "2019-08-21T08:40:02Z",
      "side": 1,
      "message": "We should be able to skip adding new state here by starting mngt operation erlier.\nSo we would add unregister_cb as a step of both unregister paths (wrapped in function with appropriate type)",
      "range": {
        "startLine": 65,
        "startChar": 1,
        "endLine": 65,
        "endChar": 49
      },
      "revId": "3199e6a4dd56ffa7b32f4e122abafae00f67f0e4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}