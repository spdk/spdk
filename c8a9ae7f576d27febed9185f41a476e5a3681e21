{
  "comments": [
    {
      "key": {
        "uuid": "33bcd6e9_b518a252",
        "filename": "module/bdev/nvme/bdev_ocssd.c",
        "patchSetId": 4
      },
      "lineNbr": 1115,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-12-11T19:06:45Z",
      "side": 1,
      "message": "I\u0027d suggest not automatically registering the poller here.  Can you instead only register it when the first pending request is added?  And unregister it when the poller is going to return with an empty TAILQ.",
      "revId": "c8a9ae7f576d27febed9185f41a476e5a3681e21",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "733ac840_6101de49",
        "filename": "module/bdev/nvme/bdev_ocssd.c",
        "patchSetId": 4
      },
      "lineNbr": 1115,
      "author": {
        "id": 1015368
      },
      "writtenOn": "2019-12-12T13:25:16Z",
      "side": 1,
      "message": "Done.\n\nI have one question though. For some specific workloads (low, but greater than 1, per-zone queue depths) this may lead to constant calls to spdk_poller_(register|unregister). spdk_poller_register allocates memory to store spdk_poller structure, so we would see a severe performance hit on this type of traffic. Perhaps it\u0027s worthwhile to add some kind of spdk_poller_(pause|resume) API for spdk_pollers? It would allow the pollers to handle this type of cases pretty efficiently. What do you think?",
      "parentUuid": "33bcd6e9_b518a252",
      "revId": "c8a9ae7f576d27febed9185f41a476e5a3681e21",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff166e98_646b9965",
        "filename": "module/bdev/nvme/bdev_ocssd.c",
        "patchSetId": 4
      },
      "lineNbr": 1115,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-12-12T15:26:22Z",
      "side": 1,
      "message": "I like it.  So something like a new TAILQ in the thread called paused_pollers.\n\nI like the pause/resume naming too.  I\u0027d say let\u0027s make sure the implementation is flexible enough so that you can pause an already paused poller (or resume an already \u0027active\u0027 poller).  I could see that being useful too.",
      "parentUuid": "733ac840_6101de49",
      "revId": "c8a9ae7f576d27febed9185f41a476e5a3681e21",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bcca9aaa_d6eda342",
        "filename": "module/bdev/nvme/bdev_ocssd.c",
        "patchSetId": 4
      },
      "lineNbr": 1115,
      "author": {
        "id": 1015368
      },
      "writtenOn": "2019-12-13T12:23:16Z",
      "side": 1,
      "message": "Great! Here\u0027s the patch implementing this: https://review.gerrithub.io/c/spdk/spdk/+/477920. It\u0027s on top of this series with the next one using the new API inside bdev_ocssd.  I did it this way not to block the other OCSSD patches in case there was a longer discussion on that patch.",
      "parentUuid": "ff166e98_646b9965",
      "revId": "c8a9ae7f576d27febed9185f41a476e5a3681e21",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}