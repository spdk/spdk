{
  "comments": [
    {
      "key": {
        "uuid": "6488dcdc_39cd1f1e",
        "filename": "module/sock/posix/posix.c",
        "patchSetId": 9
      },
      "lineNbr": 515,
      "author": {
        "id": 1016578
      },
      "writtenOn": "2019-11-27T09:26:06Z",
      "side": 1,
      "message": "what\u0027s the role of these (64) bytes?",
      "range": {
        "startLine": 515,
        "startChar": 73,
        "endLine": 515,
        "endChar": 75
      },
      "revId": "bb6209780b897177fae48a47e21a8d887c25a621",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb73183c_f7e371e9",
        "filename": "module/sock/posix/posix.c",
        "patchSetId": 9
      },
      "lineNbr": 530,
      "author": {
        "id": 1016578
      },
      "writtenOn": "2019-11-27T09:26:06Z",
      "side": 1,
      "message": "the buffer we read into has room for exactly one cmsghdr and sock_extended_err instances, so why we want to loop here?",
      "range": {
        "startLine": 530,
        "startChar": 1,
        "endLine": 530,
        "endChar": 75
      },
      "revId": "bb6209780b897177fae48a47e21a8d887c25a621",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c137dde_b46bac54",
        "filename": "module/sock/posix/posix.c",
        "patchSetId": 9
      },
      "lineNbr": 544,
      "author": {
        "id": 1016578
      },
      "writtenOn": "2019-11-27T09:26:06Z",
      "side": 1,
      "message": "I don\u0027t see how this design takes into account the non-sunny days.. namely ooo notifications [1] and notification gaps [2]. \n\nAnother design would be to mark each request with the sendmsg syscall index where the last byte of this request was flushed. And consider it pending as long as we didn\u0027t get notification for that index. \n\nWhen we get a notification for the range [lo..hi] we go over the pending list and complete requests that are in the range. This way can handle both ooo and gaps - thoughts? \n\nnew items to the pending list should be added at the tail.\n\n[1] https://netdevconf.info/2.1/papers/debruijn-msgzerocopy-talk.pdf - see the section Completion Notification and subsection Coalescing -- \"[..] Ordered delivery is not ensured for unreliable protocols such as UDP, nor for TCP on socket teardown [..]\"\n\n[2] https://elixir.bootlin.com/linux/latest/source/tools/testing/selftests/net/msg_zerocopy.c#L436 -- \"Gaps can occur due to drops, reordering and retransmissions\"",
      "range": {
        "startLine": 540,
        "startChar": 2,
        "endLine": 544,
        "endChar": 53
      },
      "revId": "bb6209780b897177fae48a47e21a8d887c25a621",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4bffdbc_d6861bbf",
        "filename": "module/sock/posix/posix.c",
        "patchSetId": 9
      },
      "lineNbr": 544,
      "author": {
        "id": 1016578
      },
      "writtenOn": "2019-12-03T07:29:40Z",
      "side": 1,
      "message": "Hi Ben, any thoughts re my suggestion -- again, the idea is \n\n[1] once a request is fully sent and moved to the pending list it is marked with the system call index of that sendmsg invocation\n\n[2] when we get notifications in the rangle [lo..hi] we go over the pending list and signal (\u003d\u003d issue the callback) for those request who are in the rangle.\n\nIt would be good to add request to the tail of the pending list and on the completion flow traverse it from the head.\n\nThis design supports both ooo notifications and notification gaps",
      "parentUuid": "3c137dde_b46bac54",
      "range": {
        "startLine": 540,
        "startChar": 2,
        "endLine": 544,
        "endChar": 53
      },
      "revId": "bb6209780b897177fae48a47e21a8d887c25a621",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ba81293_f52bc08d",
        "filename": "module/sock/posix/posix.c",
        "patchSetId": 9
      },
      "lineNbr": 544,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2019-12-10T17:57:18Z",
      "side": 1,
      "message": "This seems like a reasonable suggestion. I\u0027ll take a shot at it as soon as I get the base writev_async patches through all of the tests.",
      "parentUuid": "d4bffdbc_d6861bbf",
      "range": {
        "startLine": 540,
        "startChar": 2,
        "endLine": 544,
        "endChar": 53
      },
      "revId": "bb6209780b897177fae48a47e21a8d887c25a621",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bcec147e_a9bbb59c",
        "filename": "module/sock/posix/posix.c",
        "patchSetId": 9
      },
      "lineNbr": 544,
      "author": {
        "id": 1016578
      },
      "writtenOn": "2019-12-11T13:32:36Z",
      "side": 1,
      "message": "ok, sounds good",
      "parentUuid": "0ba81293_f52bc08d",
      "range": {
        "startLine": 540,
        "startChar": 2,
        "endLine": 544,
        "endChar": 53
      },
      "revId": "bb6209780b897177fae48a47e21a8d887c25a621",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e14893ce_3952222b",
        "filename": "module/sock/posix/posix.c",
        "patchSetId": 9
      },
      "lineNbr": 544,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2019-12-12T17:20:08Z",
      "side": 1,
      "message": "I think this ended up being a very big simplification. I\u0027m happy with how it turned out - thanks for the suggestion.",
      "parentUuid": "bcec147e_a9bbb59c",
      "range": {
        "startLine": 540,
        "startChar": 2,
        "endLine": 544,
        "endChar": 53
      },
      "revId": "bb6209780b897177fae48a47e21a8d887c25a621",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b219299_a0c378d8",
        "filename": "module/sock/posix/posix.c",
        "patchSetId": 9
      },
      "lineNbr": 577,
      "author": {
        "id": 1016578
      },
      "writtenOn": "2019-11-27T12:28:46Z",
      "side": 1,
      "message": "On my system, we systematically crash here for a read test of 16K over null bdev for queue depth of 32 [1], this is the target config [2]\n\n[1] command lines\n\nnvmf: ./app/nvmf_tgt/nvmf_tgt -c /etc/spdk/nvmf_tgt.conf.tcp.null -m 0x100\nnvme: ./examples/nvme/perf/perf -r \u0027trtype:TCP adrfam:IPv4 traddr:1.1.52.75 trsvcid:4420\u0027 -w randread  -o 16384 -c 0x100 -t 2 -q 32\n\n\n[2] Transport opts:  max_ioq_depth\u003d128, max_io_size\u003d16384,\n  max_qpairs_per_ctrlr\u003d128, io_unit_size\u003d8192,\n  in_capsule_data_size\u003d4096, max_aq_depth\u003d128\n  num_shared_buffers\u003d1024, c2h_success\u003d1,\n  dif_insert_or_strip\u003d0, sock_priority\u003d0",
      "range": {
        "startLine": 577,
        "startChar": 3,
        "endLine": 577,
        "endChar": 23
      },
      "revId": "bb6209780b897177fae48a47e21a8d887c25a621",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "831f3271_55f84698",
        "filename": "module/sock/posix/posix.c",
        "patchSetId": 9
      },
      "lineNbr": 577,
      "author": {
        "id": 1016578
      },
      "writtenOn": "2019-11-27T12:31:10Z",
      "side": 1,
      "message": "FWIW this is with kernel 5.2.something",
      "parentUuid": "1b219299_a0c378d8",
      "range": {
        "startLine": 577,
        "startChar": 3,
        "endLine": 577,
        "endChar": 23
      },
      "revId": "bb6209780b897177fae48a47e21a8d887c25a621",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67625912_6281c78a",
        "filename": "module/sock/posix/posix.c",
        "patchSetId": 9
      },
      "lineNbr": 621,
      "author": {
        "id": 1016578
      },
      "writtenOn": "2019-11-27T07:50:39Z",
      "side": 1,
      "message": "for some nasty reason centos 7.x on arm ship headers that do define SO_ZEROCOPY but don\u0027t define\nSO_ZEROCOPY so the build fail here:\n\nCC module/sock/posix/posix.o\nposix.c: In function ‘_sock_flush’:\nposix.c:621:11: error: ‘MSG_ZEROCOPY’ undeclared (first use in this function)\n   flags \u003d MSG_ZEROCOPY;\n\nsnic-010 spdk.git]# rpm -ql kernel-headers-4.14.0-49.el7a.aarch64  | xargs grep -r SO_ZEROCOPY\n/usr/include/asm-generic/socket.h:#define SO_ZEROCOPY           60\n/usr/include/asm-generic/socket.h:#define SO_ZEROCOPY           60\n\nsnic-010 spdk.git]# rpm -ql kernel-headers-4.14.0-49.el7a.aarch64  | xargs grep -r MSG_ZEROCOPY\n-- nothing -- \n\nso we need to somehow WA this and check that MSG_ZEROCOPY is also defined \n\n$ rpm -qi kernel-headers-4.14.0-49.el7a.aarch64 \nName        : kernel-headers\nVersion     : 4.14.0\nRelease     : 49.el7a\nArchitecture: aarch64\nInstall Date: Wed 22 Aug 2018 12:04:27 PM CDT\nGroup       : Development/System\nSize        : 4357406\nLicense     : GPLv2\nSignature   : RSA/SHA256, Wed 25 Apr 2018 08:05:11 AM CDT, Key ID 6c7cb6ef305d49d6\nSource RPM  : kernel-alt-4.14.0-49.el7a.src.rpm\nBuild Date  : Tue 10 Apr 2018 01:37:11 PM CDT\nBuild Host  : aarch64-01.bsys.centos.org \u003c--- official rpm \nRelocations : (not relocatable)\nPackager    : CentOS BuildSystem \u003chttp://bugs.centos.org\u003e\nVendor      : CentOS\nURL         : http://www.kernel.org/\nSummary     : Header files for the Linux kernel for use by glibc",
      "range": {
        "startLine": 621,
        "startChar": 2,
        "endLine": 621,
        "endChar": 23
      },
      "revId": "bb6209780b897177fae48a47e21a8d887c25a621",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4941514b_652279d8",
        "filename": "module/sock/posix/posix.c",
        "patchSetId": 9
      },
      "lineNbr": 621,
      "author": {
        "id": 1016578
      },
      "writtenOn": "2019-11-27T07:51:41Z",
      "side": 1,
      "message": "do define SO_ZEROCOPY but don\u0027t define MSG_ZEROCOPY",
      "parentUuid": "67625912_6281c78a",
      "range": {
        "startLine": 621,
        "startChar": 2,
        "endLine": 621,
        "endChar": 23
      },
      "revId": "bb6209780b897177fae48a47e21a8d887c25a621",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}