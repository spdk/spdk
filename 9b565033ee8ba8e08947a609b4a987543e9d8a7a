{
  "comments": [
    {
      "key": {
        "uuid": "18cc4e71_3312dbdb",
        "filename": "doc/jsonrpc.md",
        "patchSetId": 23
      },
      "lineNbr": 5607,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-10-23T08:22:02Z",
      "side": 1,
      "message": "insert a space between of and OPAL.",
      "range": {
        "startLine": 5607,
        "startChar": 33,
        "endLine": 5607,
        "endChar": 39
      },
      "revId": "9b565033ee8ba8e08947a609b4a987543e9d8a7a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a7472b2_81b7b139",
        "filename": "module/bdev/nvme/bdev_nvme.c",
        "patchSetId": 23
      },
      "lineNbr": 231,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-10-23T07:18:57Z",
      "side": 1,
      "message": "Hi Chunyang,\n\nThe following is possible?\n\nstatic void\nbdev_nvme_ctrlr_destruct(struct nvme_bdev_ctrlr *nvme_bdev_ctrlr)\n{\n\tif (nvme_bdev_ctrlr-\u003eopal_bdev) {\n\t\tif (nvme_bdev_ctrlr-\u003eopal_poller !\u003d NULL) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tpthread_mutex_lock(\u0026g_bdev_nvme_mutex);\n\tTAILQ_REMOVE(\u0026g_nvme_bdev_ctrlrs, nvme_bdev_ctrlr, tailq);\n\tpthread_mutex_unlock(\u0026g_bdev_nvme_mutex);\n\tspdk_io_device_unregister(nvme_bdev_ctrlr-\u003ectrlr, bdev_nvme_unregister_cb);\n\tspdk_poller_unregister(\u0026nvme_bdev_ctrlr-\u003eadminq_timer_poller);\n\tfree(nvme_bdev_ctrlr-\u003ename);\n\tfree(nvme_bdev_ctrlr-\u003ebdevs);\n\tfree(nvme_bdev_ctrlr);\n}\n\nstatic int\nvbdev_opal_recv_poll(void *arg)\n{\n\tstruct nvme_bdev_ctrlr *nvme_ctrlr \u003d arg;\n\tint rc;\n\n\trc \u003d spdk_opal_revert_poll(nvme_ctrlr-\u003eopal_dev);\n\tif (rc \u003d\u003d -EAGAIN) {\n\t\treturn -1;\n\t}\n\n\tspdk_poller_unregister(\u0026nvme_ctrlr-\u003eopal_poller);\n\n\tif (nvme_ctrlr-\u003edestruct) {\n\t\tbdev_nvme_ctrlr_destruct(nvme_ctrlr);\n\t}\n}",
      "revId": "9b565033ee8ba8e08947a609b4a987543e9d8a7a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30543717_d4e2886d",
        "filename": "module/bdev/nvme/bdev_nvme.c",
        "patchSetId": 23
      },
      "lineNbr": 231,
      "author": {
        "id": 1011792
      },
      "writtenOn": "2019-10-23T07:31:25Z",
      "side": 1,
      "message": "Hi Shuhei, thank you for writing this. And truly this looks good. I will take a try. But I don\u0027t quite understand why my implementation is not good. Could you give me some hints? thank you!",
      "parentUuid": "5a7472b2_81b7b139",
      "revId": "9b565033ee8ba8e08947a609b4a987543e9d8a7a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e4001a6_99caa036",
        "filename": "module/bdev/nvme/bdev_nvme.c",
        "patchSetId": 23
      },
      "lineNbr": 231,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-10-23T07:52:58Z",
      "side": 1,
      "message": "Hi Chunyang,\n\nSPDK reactor is the main event scheduler.\nSPDK reactor has one or more SPDK threads.\nSPDK reactor has the main busy loop and calls spdk_thread_poll() of each SPDK thread in the busy loop.\nEach registered poller is called in spdk_thread_poll().\n\nSo spdk_thread_poll() is expected to be called in the lowest layer.\n\nPlease see lib/event/reactor.c\nPlease see Ben\u0027s presentation as a reference.\nhttps://dqtibwqq6s6ux.cloudfront.net/download/events/2019-summit/4+SPDK+-+Flexible+and+Dynamic+Resource+Use+with+SPDK.pdf\n\n\nOn the other hand, for general OS kernel, we must not call process scheduler freely.",
      "parentUuid": "30543717_d4e2886d",
      "revId": "9b565033ee8ba8e08947a609b4a987543e9d8a7a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a4b5e74_752a66ac",
        "filename": "module/bdev/nvme/bdev_nvme.c",
        "patchSetId": 23
      },
      "lineNbr": 231,
      "author": {
        "id": 1011792
      },
      "writtenOn": "2019-10-23T07:57:16Z",
      "side": 1,
      "message": "Got it. Thank you. And it looks like there\u0027s no call of spdk_thread_poll in bdev layer. Thus I think this makes you and Changpeng uncomfortable when seeing this here:). I will try your proposal. Thank you Shuhei.",
      "parentUuid": "3e4001a6_99caa036",
      "revId": "9b565033ee8ba8e08947a609b4a987543e9d8a7a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "542f3fd1_94295610",
        "filename": "module/bdev/nvme/bdev_nvme.c",
        "patchSetId": 23
      },
      "lineNbr": 231,
      "author": {
        "id": 1011792
      },
      "writtenOn": "2019-10-23T09:30:30Z",
      "side": 1,
      "message": "Hi Shuhei, this is not working. The thread exit before poller unregistered and nvme detattach\nthread.c: 218:_free_thread: *WARNING*: poller 0x606000000560 still registered at thread exit\nthread.c: 218:_free_thread: *WARNING*: poller 0x6060000004a0 still registered at thread exit\nthread.c: 180:spdk_thread_lib_fini: *ERROR*: io_device nvme0 not unregistered\nDevice 0000:b3:00.0 is still attached at shutdown!\n\nI still think we have to wait in the bdev_nvme_ctrlr_destruct. What do you think?",
      "parentUuid": "5a4b5e74_752a66ac",
      "revId": "9b565033ee8ba8e08947a609b4a987543e9d8a7a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28cfed34_7fc83887",
        "filename": "module/bdev/nvme/bdev_nvme.c",
        "patchSetId": 23
      },
      "lineNbr": 234,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-10-23T14:16:46Z",
      "side": 1,
      "message": "Shuhei is right.  You cannot call spdk_thread_poll() here.\n\nI think you need to do something like:\n\n1) move lines 240-247 into a new function like \"bdev_nvme_free_ctrlr_resources\"\n2) if opal_bdev \u003d\u003d NULL call this new function\n2) if opal_bdev !\u003d NULL, start a poller with 1ms expiration - meaning this poller will run every 1ms\n3) when the poller function executes, check opal_bdev again - if it is NULL, unregister the poller and call your new function",
      "revId": "9b565033ee8ba8e08947a609b4a987543e9d8a7a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "591186cf_e2b2e130",
        "filename": "module/bdev/nvme/bdev_nvme.c",
        "patchSetId": 23
      },
      "lineNbr": 234,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-10-24T00:25:30Z",
      "side": 1,
      "message": "Thank you Jim. I was not elaborated. Please try Jim\u0027s solution.\n\nI think 2) may need to call spdk_opal_close(nvme_bdev_ctrlr-\u003eopal_dev) before starting the poller.",
      "parentUuid": "28cfed34_7fc83887",
      "revId": "9b565033ee8ba8e08947a609b4a987543e9d8a7a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c119a1a4_5e75af25",
        "filename": "module/bdev/nvme/vbdev_opal.c",
        "patchSetId": 23
      },
      "lineNbr": 250,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-10-23T08:22:02Z",
      "side": 1,
      "message": "moving this to around the line 264 may be better because closer to the location that locking_range_id is used.",
      "range": {
        "startLine": 250,
        "startChar": 1,
        "endLine": 250,
        "endChar": 48
      },
      "revId": "9b565033ee8ba8e08947a609b4a987543e9d8a7a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ae8cab0_fefabd9d",
        "filename": "module/bdev/nvme/vbdev_opal.c",
        "patchSetId": 23
      },
      "lineNbr": 589,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-10-23T07:18:57Z",
      "side": 1,
      "message": "this is duplicated. spdk_poller_unregister() set NULL to nvme_ctrlr-\u003eopal_poller.",
      "range": {
        "startLine": 589,
        "startChar": 0,
        "endLine": 589,
        "endChar": 32
      },
      "revId": "9b565033ee8ba8e08947a609b4a987543e9d8a7a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd584d01_3505ea47",
        "filename": "module/bdev/nvme/vbdev_opal_rpc.c",
        "patchSetId": 23
      },
      "lineNbr": 299,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-10-23T07:26:06Z",
      "side": 1,
      "message": "Why array is used? Do you plan to return multiple bdevs?",
      "range": {
        "startLine": 299,
        "startChar": 1,
        "endLine": 299,
        "endChar": 28
      },
      "revId": "9b565033ee8ba8e08947a609b4a987543e9d8a7a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e7cdbc5_ed07acad",
        "filename": "module/bdev/nvme/vbdev_opal_rpc.c",
        "patchSetId": 23
      },
      "lineNbr": 305,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-10-23T08:22:02Z",
      "side": 1,
      "message": "connecting each word by using underscore will be better. read_lock_enabled. The followings are same.",
      "range": {
        "startLine": 305,
        "startChar": 32,
        "endLine": 305,
        "endChar": 49
      },
      "revId": "9b565033ee8ba8e08947a609b4a987543e9d8a7a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}