{
  "comments": [
    {
      "key": {
        "uuid": "a645a00a_45d2050d",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 18
      },
      "lineNbr": 2162,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-12-06T23:52:22Z",
      "side": 1,
      "message": "please see spdk_io_channel_iter_get_channel and spdk_io_channel_iter_get_io_device",
      "revId": "afde80af6bfed1e1e4a1f8aec82b502ff027d9fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7806b0d4_c4c360ef",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 18
      },
      "lineNbr": 2162,
      "author": {
        "id": 1015333
      },
      "writtenOn": "2019-12-09T03:24:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a645a00a_45d2050d",
      "revId": "afde80af6bfed1e1e4a1f8aec82b502ff027d9fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "81f63948_d86693e0",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 18
      },
      "lineNbr": 2167,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-12-06T23:52:22Z",
      "side": 1,
      "message": "note - if desc-\u003eclosed \u003d\u003d true here, you should just continue immediately - after a descriptor has been closed, we should never invoke any callbacks",
      "revId": "afde80af6bfed1e1e4a1f8aec82b502ff027d9fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fc1bb4c_0b1cefdc",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 18
      },
      "lineNbr": 2167,
      "author": {
        "id": 1015333
      },
      "writtenOn": "2019-12-09T03:24:34Z",
      "side": 1,
      "message": "Ack. We must use the spdk_get_io_channel not the spdk_io_channel_iter_get_channel. Because the channel may be destroyed when we run bdev_channel_poll_timeout_io.",
      "parentUuid": "81f63948_d86693e0",
      "revId": "afde80af6bfed1e1e4a1f8aec82b502ff027d9fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a7f8b08_e3b1d246",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 18
      },
      "lineNbr": 2167,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-12-09T20:52:20Z",
      "side": 1,
      "message": "Hi Jin,\n\nI am not understanding your response.  Can you please clarify?  I really think you can just use spdk_io_channel_iter_get_channel() here.  You do not need to get an additional reference for the channel.\n\nThe cb_fn() routine should not close the channel itself, since there are still I/O outstanding.  And even if it did, spdk_put_io_channel() acts asynchronously, so the channel would still be valid for the rest of the execution of this function.\n\n-Jim",
      "parentUuid": "8fc1bb4c_0b1cefdc",
      "revId": "afde80af6bfed1e1e4a1f8aec82b502ff027d9fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34d45c6d_779f876e",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 18
      },
      "lineNbr": 2193,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-12-06T23:52:22Z",
      "side": 1,
      "message": "I think you can make this a lot simpler.  Just increment desc-\u003erefs here.  Then if it gets closed, refs \u003e 0 and it won\u0027t try to free it.\n\nThen all you need to do is decrement refs in bdev_channel_poll_timeout_io_done.  If it\u0027s 0, call bdev_desc_free on it.\n\nThen you don\u0027t need any of this STATE code.\n\n(Note: bdev resize uses a similar mechanism to what I\u0027ve described here, for when a notify event is outstanding when a descriptor gets closed).",
      "revId": "afde80af6bfed1e1e4a1f8aec82b502ff027d9fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1978820_35359d28",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 18
      },
      "lineNbr": 2193,
      "author": {
        "id": 1015333
      },
      "writtenOn": "2019-12-09T03:24:34Z",
      "side": 1,
      "message": "Hi  Jim. I have thought about this method but abandon it at last. \nsdpk_bdev_set_timeout not only set the poller but also change and unregister. So this func may run concurrently with the bdev_channel_poll_timeout_io. I don\u0027t think we want to add the mutex in the TAILQ_FOREACH when we change the timeout. Also the change should work in the next poll not this one.\nAlso we don\u0027t use any mutex.â˜º",
      "parentUuid": "34d45c6d_779f876e",
      "revId": "afde80af6bfed1e1e4a1f8aec82b502ff027d9fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a27365c_0bcccc55",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 18
      },
      "lineNbr": 2193,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2019-12-09T20:27:34Z",
      "side": 1,
      "message": "Hi Jin,\n\nThen let\u0027s make some restrictions so that we don\u0027t have to add this extra state.  I am concerned that this state is being added only for this timeout functionality, and will not be generally useful in other cases.  It is much better to keep the code simple and provide clear and well documented restrictions to the user.\n\n(Quick note: please add a note to spdk_bdev_set_timeout comments that it must be called on the same thread as spdk_bdev_open.  We also have this restriction for spdk_bdev_close.)\n\nUnregistering the poller while the spdk_for_each_channel is executing is fine.  The two are unrelated.\n\nYou could modify your timeout_set_ctx struct to remove the timeout value, but add a pointer to the spdk_bdev_desc.  Remove the timeout_set_ctx structs from spdk_bdev_desc but add a cb_fn and cb_arg member.  Then when the timeout fires, allocate one of these ctx structs, set the desc, cb_fn and cb_arg, and pass it around to spdk_for_each_channel (instead of the desc).  Then calling spdk_bdev_set_timeout can still modify the cb_fn and cb_arg, and it doesn\u0027t affect any inflight timeout operations.\n\n-Jim",
      "parentUuid": "c1978820_35359d28",
      "revId": "afde80af6bfed1e1e4a1f8aec82b502ff027d9fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}