{
  "comments": [
    {
      "key": {
        "uuid": "ce0bb6d4_bfdec34f",
        "filename": "include/spdk/bdev.h",
        "patchSetId": 10
      },
      "lineNbr": 54,
      "author": {
        "id": 1011230
      },
      "writtenOn": "2018-10-17T14:10:29Z",
      "side": 1,
      "message": "Hmmm... Not sure but I think this should be PAGE_SIZE",
      "range": {
        "startLine": 54,
        "startChar": 36,
        "endLine": 54,
        "endChar": 40
      },
      "revId": "ca7c2319b12dc179b29280b66019c5420a3bf083",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f2a4e00_aa230ac0",
        "filename": "include/spdk/bdev.h",
        "patchSetId": 10
      },
      "lineNbr": 54,
      "author": {
        "id": 1011211
      },
      "writtenOn": "2018-10-18T09:26:19Z",
      "side": 1,
      "message": "What do you mean \"PAGE_SIZE\" in context of bdev? It makes sense in blobstore, not here...",
      "parentUuid": "ce0bb6d4_bfdec34f",
      "range": {
        "startLine": 54,
        "startChar": 36,
        "endLine": 54,
        "endChar": 40
      },
      "revId": "ca7c2319b12dc179b29280b66019c5420a3bf083",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3da399e9_2d65f60b",
        "filename": "include/spdk/bdev.h",
        "patchSetId": 10
      },
      "lineNbr": 54,
      "author": {
        "id": 1011230
      },
      "writtenOn": "2018-10-18T16:12:09Z",
      "side": 1,
      "message": "What do you mean 4096? Maybe 1024 or 8192?",
      "parentUuid": "8f2a4e00_aa230ac0",
      "range": {
        "startLine": 54,
        "startChar": 36,
        "endLine": 54,
        "endChar": 40
      },
      "revId": "ca7c2319b12dc179b29280b66019c5420a3bf083",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54b03f2d_9acce425",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 10
      },
      "lineNbr": 471,
      "author": {
        "id": 1011230
      },
      "writtenOn": "2018-10-17T14:10:29Z",
      "side": 1,
      "message": "Don\u0027t that this is assert() condition.",
      "range": {
        "startLine": 471,
        "startChar": 1,
        "endLine": 471,
        "endChar": 50
      },
      "revId": "ca7c2319b12dc179b29280b66019c5420a3bf083",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3982572_adf54dce",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 10
      },
      "lineNbr": 471,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-10-18T16:56:08Z",
      "side": 1,
      "message": "I\u0027m not sure we can do anything different than an assert though.  There\u0027s no way to \"fail\" the get_buf request.\n\nYou could just drop this I/O - it means this I/O would hang, but it wouldn\u0027t corrupt the system at least.  Probably need an ERRLOG in here too.  Maybe something like:\n\nif (alignment \u003e SPDK_BDEV_BUF_MAX_ALIGNMENT) {\n  SPDK_ERRLOG(\"blah\\n\");\n  assert(false);\n  /* Drop this I/O since using the specified alignment could overflow the buffer. */\n  return;\n}",
      "parentUuid": "54b03f2d_9acce425",
      "range": {
        "startLine": 471,
        "startChar": 1,
        "endLine": 471,
        "endChar": 50
      },
      "revId": "ca7c2319b12dc179b29280b66019c5420a3bf083",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b4868b9_72bb3047",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 10
      },
      "lineNbr": 477,
      "author": {
        "id": 1011230
      },
      "writtenOn": "2018-10-17T14:10:29Z",
      "side": 1,
      "message": "max alignment is 4k so why using uint64_t here? It would be great if you can store alignment as number of bits so you use only 4 bits instead of 64.",
      "range": {
        "startLine": 477,
        "startChar": 1,
        "endLine": 477,
        "endChar": 41
      },
      "revId": "ca7c2319b12dc179b29280b66019c5420a3bf083",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4175a15_fe04bafd",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 10
      },
      "lineNbr": 477,
      "author": {
        "id": 1011211
      },
      "writtenOn": "2018-10-18T09:26:19Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7b4868b9_72bb3047",
      "range": {
        "startLine": 477,
        "startChar": 1,
        "endLine": 477,
        "endChar": 41
      },
      "revId": "ca7c2319b12dc179b29280b66019c5420a3bf083",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "66a11c60_9799632e",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 10
      },
      "lineNbr": 827,
      "author": {
        "id": 1011230
      },
      "writtenOn": "2018-10-17T14:10:29Z",
      "side": 1,
      "message": "hmmm... This expands small pool size by 50%. Are we fine with that? As an alternative you could allocate each buffer with maximum allowed alignment using rte_mempool_register_ops(). This would require some SPDK mempool API extension but would not require to calc alignment in get_buf/put_buf - buffers will be aligned by default.",
      "range": {
        "startLine": 827,
        "startChar": 8,
        "endLine": 827,
        "endChar": 67
      },
      "revId": "ca7c2319b12dc179b29280b66019c5420a3bf083",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b1c7936_148b382f",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 10
      },
      "lineNbr": 827,
      "author": {
        "id": 1011211
      },
      "writtenOn": "2018-10-18T09:26:19Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "66a11c60_9799632e",
      "range": {
        "startLine": 827,
        "startChar": 8,
        "endLine": 827,
        "endChar": 67
      },
      "revId": "ca7c2319b12dc179b29280b66019c5420a3bf083",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1fcf8f05_429906f1",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 10
      },
      "lineNbr": 827,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-10-18T16:56:08Z",
      "side": 1,
      "message": "Let\u0027s just leave this as 512 for now.  When we check which pool to pull from, do the check like this:\n\nif (len + alignment \u003e\u003d SMALL_BUF_MAX_SIZE + 512)\n\nThen if user requests an 8KB buffer with 4KB alignment, it will just pull from the big pool instead.  That\u0027s a very uncommon case so we don\u0027t need to optimize for it.\n\nYou\u0027ll need to come up with a #define for that 512 value though.",
      "parentUuid": "2b1c7936_148b382f",
      "range": {
        "startLine": 827,
        "startChar": 8,
        "endLine": 827,
        "endChar": 67
      },
      "revId": "ca7c2319b12dc179b29280b66019c5420a3bf083",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}