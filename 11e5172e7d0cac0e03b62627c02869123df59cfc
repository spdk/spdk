{
  "comments": [
    {
      "key": {
        "uuid": "35111111_4f424852",
        "filename": "lib/vhost/vhost_blk.c",
        "patchSetId": 6
      },
      "lineNbr": 320,
      "author": {
        "id": 1011218
      },
      "writtenOn": "2018-11-07T10:47:24Z",
      "side": 1,
      "message": "VIRTIO_BLK_T_WRITE_ZEROES is a standalone type, no masking is needed here (right now the result equals VIRTIO_BLK_T_WRITE_ZEROES anyway).\n\nFrom the virtio spec:\n\n```\nThe type of the request is either a read (VIRTIO_BLK_T_IN), a write\n(VIRTIO_BLK_T_OUT), a discard (VIRTIO_BLK_T_DISCARD), a write zeroes\n(VIRTIO_BLK_T_WRITE_ZEROES) or a flush (VIRTIO_BLK_T_FLUSH).\n\n#define VIRTIO_BLK_T_OUT          1\n#define VIRTIO_BLK_T_DISCARD      11\n#define VIRTIO_BLK_T_WRITE_ZEROES 13\n```",
      "range": {
        "startLine": 319,
        "startChar": 1,
        "endLine": 320,
        "endChar": 53
      },
      "revId": "11e5172e7d0cac0e03b62627c02869123df59cfc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80734721_e1782035",
        "filename": "lib/vhost/vhost_blk.c",
        "patchSetId": 6
      },
      "lineNbr": 320,
      "author": {
        "id": 1011204
      },
      "writtenOn": "2018-11-08T01:00:59Z",
      "side": 1,
      "message": "No, I debugged it before, WRITE ZEROES will be added with T_OUT too.",
      "parentUuid": "35111111_4f424852",
      "range": {
        "startLine": 319,
        "startChar": 1,
        "endLine": 320,
        "endChar": 53
      },
      "revId": "11e5172e7d0cac0e03b62627c02869123df59cfc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9e789f5_6696e12f",
        "filename": "lib/vhost/vhost_blk.c",
        "patchSetId": 6
      },
      "lineNbr": 320,
      "author": {
        "id": 1011218
      },
      "writtenOn": "2018-11-08T04:59:23Z",
      "side": 1,
      "message": "(13 | 1) \u003d\u003d 13\n\nThe spec says WRITE_ZEROES is a standalone type, so it should be one. Am I missing something?",
      "parentUuid": "80734721_e1782035",
      "range": {
        "startLine": 319,
        "startChar": 1,
        "endLine": 320,
        "endChar": 53
      },
      "revId": "11e5172e7d0cac0e03b62627c02869123df59cfc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d6634e1_3fabefc1",
        "filename": "lib/vhost/vhost_blk.c",
        "patchSetId": 6
      },
      "lineNbr": 320,
      "author": {
        "id": 1011204
      },
      "writtenOn": "2018-11-08T08:10:07Z",
      "side": 1,
      "message": "You can see the code in Guest, if (rq_data_dir(req) \u003d\u003d WRITE), for all the requests, such as DISCARD/WRITE ZEROES the first low bit is alway 1, so T_OUT is always marked.  I wrote the DISCARD/WRITE ZEROES spec, T_OUT is the direction.",
      "parentUuid": "e9e789f5_6696e12f",
      "range": {
        "startLine": 319,
        "startChar": 1,
        "endLine": 320,
        "endChar": 53
      },
      "revId": "11e5172e7d0cac0e03b62627c02869123df59cfc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbe2ad6b_91839e0c",
        "filename": "lib/vhost/vhost_blk.c",
        "patchSetId": 6
      },
      "lineNbr": 320,
      "author": {
        "id": 1011218
      },
      "writtenOn": "2018-11-08T09:31:15Z",
      "side": 1,
      "message": "Then you should change the spec. Right now it states the type of the request is *either* VIRTIO_BLK_T_OUT or VIRTIO_BLK_T_WRITE_ZEROES, but never both at the same time.\n\nVIRTIO_BLK_T_WRITE_ZEROES implicitly contains VIRTIO_BLK_T_OUT, so checking against just VIRTIO_BLK_T_WRITE_ZEROES is fine.",
      "parentUuid": "9d6634e1_3fabefc1",
      "range": {
        "startLine": 319,
        "startChar": 1,
        "endLine": 320,
        "endChar": 53
      },
      "revId": "11e5172e7d0cac0e03b62627c02869123df59cfc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14e486fd_92f86b21",
        "filename": "lib/vhost/vhost_blk.c",
        "patchSetId": 6
      },
      "lineNbr": 884,
      "author": {
        "id": 1011218
      },
      "writtenOn": "2018-11-07T10:47:24Z",
      "side": 1,
      "message": "This might now try to call spdk_vhost_dev_unregister() on a non-registered vdev. That\u0027s not supported and will likely segfault.",
      "range": {
        "startLine": 884,
        "startChar": 2,
        "endLine": 884,
        "endChar": 11
      },
      "revId": "11e5172e7d0cac0e03b62627c02869123df59cfc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f362553_b259cfac",
        "filename": "lib/vhost/vhost_blk.c",
        "patchSetId": 6
      },
      "lineNbr": 884,
      "author": {
        "id": 1011204
      },
      "writtenOn": "2018-11-08T01:00:59Z",
      "side": 1,
      "message": "Why? it will return at first check point.",
      "parentUuid": "14e486fd_92f86b21",
      "range": {
        "startLine": 884,
        "startChar": 2,
        "endLine": 884,
        "endChar": 11
      },
      "revId": "11e5172e7d0cac0e03b62627c02869123df59cfc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7342362_8be912f1",
        "filename": "lib/vhost/vhost_blk.c",
        "patchSetId": 6
      },
      "lineNbr": 884,
      "author": {
        "id": 1014600
      },
      "writtenOn": "2018-11-08T02:11:05Z",
      "side": 1,
      "message": "\u003e it will return at first check point.\n\nIt maybe true for now. But if we update the public interface spdk_vhost_dev_unregister(), we cannot assure it anymore and we have great chance to forget update caller of spdk_vhost_dev_unregister().",
      "parentUuid": "1f362553_b259cfac",
      "range": {
        "startLine": 884,
        "startChar": 2,
        "endLine": 884,
        "endChar": 11
      },
      "revId": "11e5172e7d0cac0e03b62627c02869123df59cfc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e394f99_dde4782d",
        "filename": "lib/vhost/vhost_blk.c",
        "patchSetId": 6
      },
      "lineNbr": 884,
      "author": {
        "id": 1014600
      },
      "writtenOn": "2018-11-08T02:14:00Z",
      "side": 1,
      "message": "\u003e \u003e it will return at first check point.\n\u003e \n\u003e It maybe true for now. But if we update the public interface spdk_vhost_dev_unregister(), we cannot assure it anymore and we have great chance to forget update caller of spdk_vhost_dev_unregister().\n\nSorry, ignore my comment.",
      "parentUuid": "d7342362_8be912f1",
      "range": {
        "startLine": 884,
        "startChar": 2,
        "endLine": 884,
        "endChar": 11
      },
      "revId": "11e5172e7d0cac0e03b62627c02869123df59cfc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}