{
  "comments": [
    {
      "key": {
        "uuid": "74f295e8_e0a23893",
        "filename": "lib/nvme/nvme_rdma.c",
        "patchSetId": 3
      },
      "lineNbr": 1765,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2019-06-26T09:46:39Z",
      "side": 1,
      "message": "This will already get reduced to whatever the mdts value is that the target sets in the generic layer. I think the problem is that we were returning an artificially small value here. Couldn\u0027t we solve this in a simpler way by just setting the value to be the value in ibv_device_attr.max_mr_size?",
      "revId": "44ee3e9af10b5bc8bb4f871d24d68c76c39be14b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8949df98_b893b79f",
        "filename": "lib/nvme/nvme_rdma.c",
        "patchSetId": 3
      },
      "lineNbr": 1765,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-06-27T05:30:04Z",
      "side": 1,
      "message": "Thank you for nice suggestion. Done.",
      "parentUuid": "74f295e8_e0a23893",
      "revId": "44ee3e9af10b5bc8bb4f871d24d68c76c39be14b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddcecc2f_c17b00ec",
        "filename": "lib/nvme/nvme_rdma.c",
        "patchSetId": 3
      },
      "lineNbr": 1765,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-06-27T05:32:36Z",
      "side": 1,
      "message": "Oh, I will update more because dev_attr can be used below. So I will cache dev_attr to nvme_rdma_ctrlr and use in both cases.",
      "parentUuid": "8949df98_b893b79f",
      "revId": "44ee3e9af10b5bc8bb4f871d24d68c76c39be14b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abccd96a_3f91b709",
        "filename": "lib/nvme/nvme_rdma.c",
        "patchSetId": 3
      },
      "lineNbr": 1765,
      "author": {
        "id": 1011223
      },
      "writtenOn": "2019-07-02T01:44:53Z",
      "side": 1,
      "message": "I don\u0027t think that using the max_mr_size value is the right thing to do here. While it\u0027s true that for a transfer containing a single buffer, we would have to split along the memory region, that is not true in the case where we are sending a request with multiple SGL elements. Each one of those elements is allowed to have it\u0027s own key (i.e. correspond to its own MR). Also, just because we know what the maximum supported memory region size is, doesn\u0027t mean that our MRs are actually registered at that granularity. I don\u0027t know, but I have a hunch that the value returned from most NICs for max_mr_size is \u003e 2MiB which is the granularity at which we currently register memory regions.\n\nI think that relying solely on the mdts value for both the rdma and tcp fabrics is the right thing to do. We should just return UINT32_MAX here and let the generic code use the controller data to moderate this value.",
      "parentUuid": "ddcecc2f_c17b00ec",
      "revId": "44ee3e9af10b5bc8bb4f871d24d68c76c39be14b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9429444_2daa7f63",
        "filename": "lib/nvme/nvme_rdma.c",
        "patchSetId": 3
      },
      "lineNbr": 1771,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2019-06-26T09:46:39Z",
      "side": 1,
      "message": "I think we need to clean this up a bit - taking the minimum of the transport returned value and the target value (in ctrlr-\u003ecdata.nvmf_specific.msdbd) should be done in the generic nvme code like it\u0027s done for the maximum transfer size.\n\nThis function should return the minimum of NVME_RDMA_MAX_SGL_DESCRIPTORS, ibv_device_attr.max_sge, and ibv_device_attr.max_sge_rd.",
      "revId": "44ee3e9af10b5bc8bb4f871d24d68c76c39be14b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c053bf2_13bae3ba",
        "filename": "lib/nvme/nvme_rdma.c",
        "patchSetId": 3
      },
      "lineNbr": 1771,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-06-27T05:30:04Z",
      "side": 1,
      "message": "I\u0027ll do this in a separate patch.",
      "parentUuid": "a9429444_2daa7f63",
      "revId": "44ee3e9af10b5bc8bb4f871d24d68c76c39be14b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8d0cf96_10c80ccb",
        "filename": "lib/nvme/nvme_tcp.c",
        "patchSetId": 3
      },
      "lineNbr": 1869,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2019-06-26T09:46:39Z",
      "side": 1,
      "message": "For TCP, there isn\u0027t any actual limit on the size of a buffer for the local transport. Can we instead just return MAXUINT32 here? The generic code above this will reduce the value to whatever the target says is the maximum.",
      "revId": "44ee3e9af10b5bc8bb4f871d24d68c76c39be14b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb7a2550_1a914370",
        "filename": "lib/nvme/nvme_tcp.c",
        "patchSetId": 3
      },
      "lineNbr": 1869,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2019-06-27T05:30:04Z",
      "side": 1,
      "message": "Thank you for reasonable suggestion, Done.",
      "revId": "44ee3e9af10b5bc8bb4f871d24d68c76c39be14b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}