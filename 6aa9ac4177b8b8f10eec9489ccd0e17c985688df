{
  "comments": [
    {
      "key": {
        "uuid": "2555f2cb_19f52b9d",
        "filename": "lib/net/sock.c",
        "patchSetId": 1
      },
      "lineNbr": 441,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2018-02-19T23:06:03Z",
      "side": 1,
      "message": "It looks that freeing sock_group is done in not posix layer but general socket layer.\n\n- spdk_posix_sock_group_create() creates and returns fd\n- spdk_sock_group_create() allocates and initilize sock_group by using returned fd\n\nis more symmetric?",
      "range": {
        "startLine": 434,
        "startChar": 0,
        "endLine": 441,
        "endChar": 21
      },
      "revId": "6aa9ac4177b8b8f10eec9489ccd0e17c985688df",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5172e03f_79f410de",
        "filename": "lib/net/sock.c",
        "patchSetId": 1
      },
      "lineNbr": 441,
      "author": {
        "id": 1011221
      },
      "writtenOn": "2018-02-20T14:28:02Z",
      "side": 1,
      "message": "I\u0027d tend to agree with Shuhei. It makes sense to initialize and free spdk_sock_group in general socket layer.\n\nMeanwhile posix layer only fills out the sock_group-\u003efd. In that case this function could look very similar to spdk_posix_sock_group_close() - instead of returning fd, return possible error code.\n\nstatic int spdk_posix_sock_group_create(struct spdk_sock_group *group)",
      "parentUuid": "2555f2cb_19f52b9d",
      "range": {
        "startLine": 434,
        "startChar": 0,
        "endLine": 441,
        "endChar": 21
      },
      "revId": "6aa9ac4177b8b8f10eec9489ccd0e17c985688df",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c93f646_d5af95f7",
        "filename": "lib/net/sock.c",
        "patchSetId": 1
      },
      "lineNbr": 441,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-02-20T14:31:28Z",
      "side": 1,
      "message": "Hi Shuhei,\n\nI am not sure I understand your question.  spdk_sock_group_create() does not know about the fd - the fd is part of posix-specific spdk_posix_sock_group structure.\n\nI could change these patches to have the implementation-specific routines free the memory since they also allocate the memory though.\n\n-Jim",
      "parentUuid": "2555f2cb_19f52b9d",
      "range": {
        "startLine": 434,
        "startChar": 0,
        "endLine": 441,
        "endChar": 21
      },
      "revId": "6aa9ac4177b8b8f10eec9489ccd0e17c985688df",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cfabcf43_a24cbe1b",
        "filename": "lib/net/sock.c",
        "patchSetId": 1
      },
      "lineNbr": 441,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-02-20T14:31:28Z",
      "side": 1,
      "message": "spdk_posix_sock_group_close() does not return the fd.  It returns the return code of close(fd).\n\nWe cannot initialize and free spdk_sock_group in the the general layer - the general layer knows nothing about the implementation specific details.  The implementation specific code *has* to do the allocation - only it knows how much extra memory is needed for these details.\n\nNow, maybe implementation specific code should also free that memory - I can make those changes.",
      "parentUuid": "5172e03f_79f410de",
      "range": {
        "startLine": 434,
        "startChar": 0,
        "endLine": 441,
        "endChar": 21
      },
      "revId": "6aa9ac4177b8b8f10eec9489ccd0e17c985688df",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15ef6f46_768ae309",
        "filename": "lib/net/sock.c",
        "patchSetId": 1
      },
      "lineNbr": 441,
      "author": {
        "id": 1011221
      },
      "writtenOn": "2018-02-20T16:31:52Z",
      "side": 1,
      "message": "You are right, after looking at patch https://review.gerrithub.io/#/c/400527/1/lib/net/sock.c\nI now understand why you wanted to keep allocation of spdk_posix_sock_group_impl inside the posix implementation.",
      "parentUuid": "cfabcf43_a24cbe1b",
      "range": {
        "startLine": 434,
        "startChar": 0,
        "endLine": 441,
        "endChar": 21
      },
      "revId": "6aa9ac4177b8b8f10eec9489ccd0e17c985688df",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8d4561b_47341362",
        "filename": "lib/net/sock.c",
        "patchSetId": 1
      },
      "lineNbr": 441,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-02-20T17:29:29Z",
      "side": 1,
      "message": "If it is OK with both of you - I would like to keep this as-is for now - allocate the memory in implementation-specific code, and free it in generic code.\n\nThis will ensure consistency and reduce code duplication for process of freeing sock/sock_group when closed.\n\nIf necessary, we can re-assess after this patch series is committed and make more changes later.\n\n-Jim",
      "parentUuid": "15ef6f46_768ae309",
      "range": {
        "startLine": 434,
        "startChar": 0,
        "endLine": 441,
        "endChar": 21
      },
      "revId": "6aa9ac4177b8b8f10eec9489ccd0e17c985688df",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20c32a76_03bfdf48",
        "filename": "lib/net/sock.c",
        "patchSetId": 1
      },
      "lineNbr": 441,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2018-02-20T23:31:39Z",
      "side": 1,
      "message": "Hi Jim, Tomasz, thank you and now I could understand well and keeping this is fine for me.",
      "parentUuid": "f8d4561b_47341362",
      "range": {
        "startLine": 434,
        "startChar": 0,
        "endLine": 441,
        "endChar": 21
      },
      "revId": "6aa9ac4177b8b8f10eec9489ccd0e17c985688df",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}