{
  "comments": [
    {
      "key": {
        "uuid": "51640fa5_3bd541ed",
        "filename": "lib/nvmf/rdma.c",
        "patchSetId": 8
      },
      "lineNbr": 2976,
      "author": {
        "id": 1016781
      },
      "writtenOn": "2020-01-13T15:04:16Z",
      "side": 1,
      "message": "is there any reason to ack event here and not after this function is executed?",
      "range": {
        "startLine": 2976,
        "startChar": 3,
        "endLine": 2976,
        "endChar": 28
      },
      "revId": "080c5b4473372f796d08038497c5936157ed4366",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b3acf97_f4b31518",
        "filename": "lib/nvmf/rdma.c",
        "patchSetId": 8
      },
      "lineNbr": 2976,
      "author": {
        "id": 1011223
      },
      "writtenOn": "2020-01-13T16:42:10Z",
      "side": 1,
      "message": "Yes, you can\u0027t destroy a CM_ID until all of the CM events associated with it have been acked, and we end up destroying this CM_ID in spdk_nvmf_rdma_stop_listen which is called farther down in this function.",
      "parentUuid": "51640fa5_3bd541ed",
      "range": {
        "startLine": 2976,
        "startChar": 3,
        "endLine": 2976,
        "endChar": 28
      },
      "revId": "080c5b4473372f796d08038497c5936157ed4366",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f2b0900_60aa6928",
        "filename": "lib/nvmf/rdma.c",
        "patchSetId": 8
      },
      "lineNbr": 2976,
      "author": {
        "id": 1016781
      },
      "writtenOn": "2020-01-13T23:49:04Z",
      "side": 1,
      "message": "make sense to me, thanks",
      "parentUuid": "2b3acf97_f4b31518",
      "range": {
        "startLine": 2976,
        "startChar": 3,
        "endLine": 2976,
        "endChar": 28
      },
      "revId": "080c5b4473372f796d08038497c5936157ed4366",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75a2f07a_1a378b3d",
        "filename": "lib/nvmf/rdma.c",
        "patchSetId": 8
      },
      "lineNbr": 2980,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2020-01-14T06:39:41Z",
      "side": 1,
      "message": "Caching to temporary variables is necessary? Just using port-\u003etrid and port-\u003eref below is enough?",
      "range": {
        "startLine": 2978,
        "startChar": 0,
        "endLine": 2980,
        "endChar": 0
      },
      "revId": "080c5b4473372f796d08038497c5936157ed4366",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f16fccf_37d7c0ee",
        "filename": "lib/nvmf/rdma.c",
        "patchSetId": 8
      },
      "lineNbr": 2980,
      "author": {
        "id": 1016781
      },
      "writtenOn": "2020-01-14T10:20:39Z",
      "side": 1,
      "message": "Copy is needed because port will be freed on stop_listen.\nHowever, I\u0027m wondering what kind of migration is it if we stop trid and listen with the same trid again?",
      "parentUuid": "75a2f07a_1a378b3d",
      "range": {
        "startLine": 2978,
        "startChar": 0,
        "endLine": 2980,
        "endChar": 0
      },
      "revId": "080c5b4473372f796d08038497c5936157ed4366",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a092a354_32d3e851",
        "filename": "lib/nvmf/rdma.c",
        "patchSetId": 8
      },
      "lineNbr": 2983,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2020-01-14T06:39:41Z",
      "side": 1,
      "message": "This is fine but if (!event_acked) { return false; } will reduce nest level by 1 and will be a little simpler.",
      "range": {
        "startLine": 2983,
        "startChar": 1,
        "endLine": 2983,
        "endChar": 19
      },
      "revId": "080c5b4473372f796d08038497c5936157ed4366",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19856ae7_1f14b3e5",
        "filename": "lib/nvmf/rdma.c",
        "patchSetId": 8
      },
      "lineNbr": 2995,
      "author": {
        "id": 1016482
      },
      "writtenOn": "2020-01-16T13:32:40Z",
      "side": 1,
      "message": "I checked how kernel target handles this event, they handle it in the same way as RDMA_CM_EVENT_DISCONNECTED - just disconnects the associated qpair. Can you please explain why you decided to restart listeners? I don\u0027t mean that this is wrong way, I just want to understand the reason",
      "range": {
        "startLine": 2995,
        "startChar": 3,
        "endLine": 2995,
        "endChar": 48
      },
      "revId": "080c5b4473372f796d08038497c5936157ed4366",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b06be830_d6c568c6",
        "filename": "lib/nvmf/rdma.c",
        "patchSetId": 8
      },
      "lineNbr": 2995,
      "author": {
        "id": 1011223
      },
      "writtenOn": "2020-01-17T17:57:55Z",
      "side": 1,
      "message": "My understanding is that in the case of active-active bonding failover, when we are listening on a specific port and that port goes down, then we need to start listening on the new port or we get failures when trying to reconnect from the initiator until we destroy the listener and start listening on the new port. I don\u0027t personally have a setup with active-active bonding enabled, but I was working with a user who did and that was the behavior they reported.",
      "parentUuid": "19856ae7_1f14b3e5",
      "range": {
        "startLine": 2995,
        "startChar": 3,
        "endLine": 2995,
        "endChar": 48
      },
      "revId": "080c5b4473372f796d08038497c5936157ed4366",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44d07e1b_530ec26f",
        "filename": "lib/nvmf/rdma.c",
        "patchSetId": 8
      },
      "lineNbr": 2997,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2020-01-14T06:39:41Z",
      "side": 1,
      "message": "for (i \u003d 0; i \u003c ref; i++) may be a little simpler.",
      "revId": "080c5b4473372f796d08038497c5936157ed4366",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}