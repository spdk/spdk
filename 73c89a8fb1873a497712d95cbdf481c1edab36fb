{
  "comments": [
    {
      "key": {
        "uuid": "820122e5_0a949c7f",
        "filename": "include/spdk/thread.h",
        "patchSetId": 3
      },
      "lineNbr": 422,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2019-12-16T22:32:01Z",
      "side": 1,
      "message": "spdk_poller_register implies the current thread, and spdk_poller_unregister must be called from the thread where the poller was previously registered. Given that, placing the same restrictions on spdk_poller_pause and spdk_poller_resume make sense. Let\u0027s state that here in the comments.\n\nThis is going to help a bit with some comments I have down below.",
      "revId": "73c89a8fb1873a497712d95cbdf481c1edab36fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5321085c_69503358",
        "filename": "lib/thread/thread.c",
        "patchSetId": 3
      },
      "lineNbr": 497,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2019-12-16T22:32:01Z",
      "side": 1,
      "message": "I think we can make paused pollers \"zero cost\" by shifting this work to spdk_poller_resume. See my comments there.",
      "revId": "73c89a8fb1873a497712d95cbdf481c1edab36fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ac03018_cc44bff0",
        "filename": "lib/thread/thread.c",
        "patchSetId": 3
      },
      "lineNbr": 637,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2019-12-16T22:32:01Z",
      "side": 1,
      "message": "I don\u0027t think this definition needed to change.",
      "revId": "73c89a8fb1873a497712d95cbdf481c1edab36fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a68d7ee9_974b1537",
        "filename": "lib/thread/thread.c",
        "patchSetId": 3
      },
      "lineNbr": 637,
      "author": {
        "id": 1015368
      },
      "writtenOn": "2019-12-17T12:13:26Z",
      "side": 1,
      "message": "What do you mean? Shouldn\u0027t spdk_thread_has_pollers return true if all pollers are paused on that thread, while spdk_thread_is_idle return false in that case?",
      "parentUuid": "7ac03018_cc44bff0",
      "revId": "73c89a8fb1873a497712d95cbdf481c1edab36fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76cac4c0_0975a462",
        "filename": "lib/thread/thread.c",
        "patchSetId": 3
      },
      "lineNbr": 637,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2019-12-17T15:43:47Z",
      "side": 1,
      "message": "Yeah - I guess that makes the most logical sense. This was only being used in that idle check before so it could have ignored paused pollers and given the right answer. But your change here makes sense.",
      "parentUuid": "a68d7ee9_974b1537",
      "revId": "73c89a8fb1873a497712d95cbdf481c1edab36fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d654831b_b9b1625c",
        "filename": "lib/thread/thread.c",
        "patchSetId": 3
      },
      "lineNbr": 825,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2019-12-16T22:32:01Z",
      "side": 1,
      "message": "If the poller state is paused here, move it to the active list and then set the state to unregistered.\n\n(Note I also now see what might be a bug with unregistering pollers on long timers. They won\u0027t get cleaned up until they expire with this logic. Really this function should set their period to 0 and mark them unregistered I think.)",
      "revId": "73c89a8fb1873a497712d95cbdf481c1edab36fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c7d7a5f_89717012",
        "filename": "lib/thread/thread.c",
        "patchSetId": 3
      },
      "lineNbr": 825,
      "author": {
        "id": 1015368
      },
      "writtenOn": "2019-12-17T12:13:26Z",
      "side": 1,
      "message": "Take a look at my comment in spdk_poller_resume. I think this proposal also requires the poller to be inserted/removed from the paused_pollers queue immediatly in spdk_poller_(pause|resume).\n\nAs for the other observation, I can post a fix once we figure out how we want to proceed with this patch.",
      "parentUuid": "d654831b_b9b1625c",
      "revId": "73c89a8fb1873a497712d95cbdf481c1edab36fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4b2a806_80d51353",
        "filename": "lib/thread/thread.c",
        "patchSetId": 3
      },
      "lineNbr": 828,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2019-12-16T22:32:01Z",
      "side": 1,
      "message": "It\u0027s safe here to just do this:\n\nTAILQ_REMOVE(\u0026thread-\u003eactive_pollers, poller, tailq);\nTAILQ_INSERT_TAIL(\u0026thread-\u003epaused_pollers, poller, tailq);\n\nIn spdk_thread_poll(), it specifically does a safe iteration in reverse over the active_pollers list to allow for modifications inside poller callbacks. The reason spdk_poller_unregister does it the way it does is because it actually needs to release memory.",
      "revId": "73c89a8fb1873a497712d95cbdf481c1edab36fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec03ea76_9f7fbf43",
        "filename": "lib/thread/thread.c",
        "patchSetId": 3
      },
      "lineNbr": 828,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2019-12-16T22:46:58Z",
      "side": 1,
      "message": "I\u0027m wrong on this one actually, because you don\u0027t know if the poller is on the active_pollers list or the timed_pollers list. This will need to continue to work basically as you have it where it just sets the state and returns. My comments on spdk_poller_resume() are valid though.",
      "parentUuid": "d4b2a806_80d51353",
      "revId": "73c89a8fb1873a497712d95cbdf481c1edab36fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9756de5d_f27d6edd",
        "filename": "lib/thread/thread.c",
        "patchSetId": 3
      },
      "lineNbr": 828,
      "author": {
        "id": 1015368
      },
      "writtenOn": "2019-12-17T12:13:26Z",
      "side": 1,
      "message": "Couldn\u0027t we check the poller-\u003eperiod_ticks \u003d\u003d 0 to distinguish timed poller from an acitve one though?\n\nI can see another potential problem with removing the poller from the active/timer pollers here. Let\u0027s say there are two active pollers and while executing the first one (1), a user tries to pause the other one (2). It\u0027d cause spdk_poller_pause to remove poller (2) from active_pollers and put it on the paused_pollers list. The code would then return to spdk_thread_poll from current poller\u0027s (1) poller_fn and continue executing other pollers. But since the next poller (2) was removed from the active_pollers list, the TAILQ_FOREACH_REVERSE_SAFE macro would set current poller to the poller that was just removed (2) and would start executing pollers from the paused_pollers list.\nPerhaps just a comment in the header stating that a poller cannot be paused from the execution context of another one would be enough? It does seem a little cryptic though. What do you think?",
      "parentUuid": "ec03ea76_9f7fbf43",
      "revId": "73c89a8fb1873a497712d95cbdf481c1edab36fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffc61280_89f3f218",
        "filename": "lib/thread/thread.c",
        "patchSetId": 3
      },
      "lineNbr": 828,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2019-12-17T15:43:47Z",
      "side": 1,
      "message": "Ouch - this is a tough one and I\u0027m not sure we\u0027ll find our way out of it. You\u0027re right that we can use period_ticks to distinguish which list it\u0027s on. We can also use poller-\u003estate \u003d\u003d SPDK_POLLER_STATE_RUNNING to determine if a poller is the currently executing one. It may be possible to combine those two things to solve this.\n\n1) If poller-\u003estate \u003d\u003d SPDK_POLLER_STATE_RUNNING and the user pauses it, then it\u0027s safe to immediately move it to the paused list without breaking the TAILQ_FOREACH_REVERSE_SAFE.\n2) If the user is pausing a poller from outside of that poller\u0027s context, I think we need a new state \u003d SPDK_POLLER_STATE_PAUSING. In this state, the poller is requested to pause but is still on the active/timed list.\n3) Within the TAILQ_FOREACH_REVERSE_SAFE in spdk_thread_poll(), if a poller is encountered in the SPDK_POLLER_STATE_PAUSING state, it can move it to the paused state and list. For active pollers it checks them all in succession, so it\u0027ll find it either later in the current loop iterator, or on the next time spdk_thread_poll is called. For timed pollers, they\u0027ll remain in the SPDK_POLLER_STATE_PAUSING state until they expire once.\n4) If the user attempts to resume a thread in the SPDK_POLLER_STATE_PAUSING state, it can simply move it back to the active state since it\u0027s already on the correct list. If the user attempts to resume a thread in the SPDK_POLLER_STATE_PAUSED state, it can move it to the right list and set the state to active.\n\nDo you see any holes in that strategy? The only thing I see is around timed pollers. If a timed poller is set to expire at time 10 and is paused at time 0 from another poller\u0027s context, it sits in the timed pollers list until time 10. If it is instead resumed at time 5, it sees that it is still in the process of pausing and just flips its state back, meaning it expires at time 10 still. Should pausing have pushed out the next expiration to time 15? In the grand scheme of things, I don\u0027t think this actually matters - it\u0027s not the absolute time of pollers that is important but rather the delta between successive poller calls, and that is maintained here well enough.",
      "parentUuid": "9756de5d_f27d6edd",
      "revId": "73c89a8fb1873a497712d95cbdf481c1edab36fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00a0429b_189e49de",
        "filename": "lib/thread/thread.c",
        "patchSetId": 3
      },
      "lineNbr": 834,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2019-12-16T22:32:01Z",
      "side": 1,
      "message": "Similarly, you can directly remove the poller from the paused list and place it on the active list here. Then you don\u0027t need to check the paused list every time you poll.",
      "revId": "73c89a8fb1873a497712d95cbdf481c1edab36fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30d96580_f961e4e7",
        "filename": "lib/thread/thread.c",
        "patchSetId": 3
      },
      "lineNbr": 834,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2019-12-16T22:46:58Z",
      "side": 1,
      "message": "To clarify, if poller-\u003estate \u003d\u003d SPDK_POLLER_STATE_PAUSED, you can immediately remove it from the paused list and add it to the (active|timed) lists as appropriate here. That makes paused pollers \"zero cost\" since you don\u0027t need to poll all of them each time in spdk_thread_poll.",
      "parentUuid": "00a0429b_189e49de",
      "revId": "73c89a8fb1873a497712d95cbdf481c1edab36fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "598c0d8b_e33979d8",
        "filename": "lib/thread/thread.c",
        "patchSetId": 3
      },
      "lineNbr": 834,
      "author": {
        "id": 1015368
      },
      "writtenOn": "2019-12-17T12:13:26Z",
      "side": 1,
      "message": "I don\u0027t think we can rely on the poller-\u003estate \u003d\u003d SPDK_POLLER_STATE_PAUSED to remove the poller from the paused list if spdk_poller_pause just sets the poller\u0027s state. Let\u0027s say a user pauses a poller and then immediately resumes it before returning to spdk_thread_poll. In that case, it wouldn\u0027t have had a chance to be added on the paused_poller queue, so we would remove it from a wrong queue.\nI think we either have to add/remove the pollers in both spdk_poller_pause/spdk_poller_resume or we don\u0027t do it from neither one of these.",
      "parentUuid": "30d96580_f961e4e7",
      "revId": "73c89a8fb1873a497712d95cbdf481c1edab36fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}