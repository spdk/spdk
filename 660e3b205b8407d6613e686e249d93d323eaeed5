{
  "comments": [
    {
      "key": {
        "uuid": "27ecbf09_de0cb127",
        "filename": "include/spdk/bdev.h",
        "patchSetId": 9
      },
      "lineNbr": 106,
      "author": {
        "id": 1011271
      },
      "writtenOn": "2018-07-10T17:07:37Z",
      "side": 1,
      "message": "One major problem with this change is it changes the BDEV APU.\nOur bdev module uses the spdk_bdev_io_type to identify what the\nNVMe command is.  This data structure has changed since 17.03,  Here\u0027s \nthe version that our NetApp bdev module uses.\n\n/** Blockdev I/O type */\nenum spdk_bdev_io_type {\n        SPDK_BDEV_IO_TYPE_INVALID,   /* Internal error */\n        SPDK_BDEV_IO_TYPE_READ,      /* NVMe Read command */\n        SPDK_BDEV_IO_TYPE_WRITE,     /* NVMe Write command */\n        SPDK_BDEV_IO_TYPE_UNMAP,     /* NVMe DSM/Deallocate command */\n        SPDK_BDEV_IO_TYPE_FLUSH,     /* NVMe Flush command */\n        SPDK_BDEV_IO_TYPE_RESET,     /* NVMe Controller Reset Operation */\n};\n\nI need a zero copy BDEV API the preserves the NVME command semantics of the original spdk_bdev_io_type.  Changing the spdk_bdev_io_type from READ or WRITE, or WRITE_ZERO to ZCOPY doesn\u0027t work for our bdev.\n\nI\u0027ll note that we also need to add more bdev_io_types to this API in the near future.  The big one is SPDK_BDEV_IO_TYPE_ABORT.  We need a BDEV API to support NVMe Abort.",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 106,
        "endChar": 25
      },
      "revId": "660e3b205b8407d6613e686e249d93d323eaeed5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ec659c6_03c079fc",
        "filename": "include/spdk/bdev.h",
        "patchSetId": 9
      },
      "lineNbr": 106,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-07-10T17:53:52Z",
      "side": 1,
      "message": "Some changes to your bdev module will be required.  But when you get a ZCOPY command, you can get the populate flag to indicate whether the specified buffers need to be allocated (for a read) or not.  Then when the ZCOPY end occurs, the commit flag will indicate if its a write.\n\nWe purposely want to keep ZCOPY as a different IO type than read/write.  zcopy means that the bdev module is allocating or specifying the I/O buffers, while for read/write, the caller is supplying the IO buffers.",
      "parentUuid": "27ecbf09_de0cb127",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 106,
        "endChar": 25
      },
      "revId": "660e3b205b8407d6613e686e249d93d323eaeed5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4c15aef5_310d0c9a",
        "filename": "include/spdk/bdev.h",
        "patchSetId": 9
      },
      "lineNbr": 655,
      "author": {
        "id": 1010525
      },
      "writtenOn": "2018-07-03T23:21:02Z",
      "side": 1,
      "message": "It might be good to emphasize that the data may actually get written back even if commit \u003d\u003d false (such as in the malloc bdev case, where the buffer is directly pointing at the  storage).",
      "revId": "660e3b205b8407d6613e686e249d93d323eaeed5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8cfa91e1_ba9111b2",
        "filename": "include/spdk/bdev.h",
        "patchSetId": 9
      },
      "lineNbr": 655,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-07-04T00:06:27Z",
      "side": 1,
      "message": "I agree.  I\u0027m afraid this might make it sound like if you set commit\u003dfalse that whatever data you wrote to the buffer will get thrown away.\n\nI think the populate parameter is named correctly, but maybe \u0027commit\u0027 should be something else?  What about \u0027modified\u0027?  Then the caller basically indicates whether they modified the data or not - and the bdev module can decide what it has to do if it was modified (which for malloc is a nop).",
      "parentUuid": "4c15aef5_310d0c9a",
      "revId": "660e3b205b8407d6613e686e249d93d323eaeed5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6801fd96_15c8cddb",
        "filename": "include/spdk/bdev.h",
        "patchSetId": 9
      },
      "lineNbr": 655,
      "author": {
        "id": 1010531
      },
      "writtenOn": "2018-07-05T17:31:33Z",
      "side": 1,
      "message": "Could also call it \"dirty\"",
      "parentUuid": "8cfa91e1_ba9111b2",
      "revId": "660e3b205b8407d6613e686e249d93d323eaeed5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4612cdab_7d5e8155",
        "filename": "include/spdk/bdev.h",
        "patchSetId": 9
      },
      "lineNbr": 655,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-07-05T20:31:17Z",
      "side": 1,
      "message": "Yep - I like that name better.",
      "parentUuid": "6801fd96_15c8cddb",
      "revId": "660e3b205b8407d6613e686e249d93d323eaeed5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d5c494f_95c7f96e",
        "filename": "include/spdk/bdev_module.h",
        "patchSetId": 9
      },
      "lineNbr": 372,
      "author": {
        "id": 1011222
      },
      "writtenOn": "2018-07-10T17:53:52Z",
      "side": 1,
      "message": "this needs to be two separate flags - one for populate, one for commit\n\nthen when ZCOPY end occurs, the bdev module can know whether the ZCOPY start specified populate or not",
      "revId": "660e3b205b8407d6613e686e249d93d323eaeed5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29492c78_fd4f5294",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 9
      },
      "lineNbr": 1874,
      "author": {
        "id": 1011327
      },
      "writtenOn": "2018-07-10T17:46:20Z",
      "side": 1,
      "message": "I was talking about this code path in today\u0027s meeting (similarly for other media cmds).\nspdk_nvmf_request_exec\n spdk_nvmf_ctrlr_process_io_cmd\n  nvmf_bdev_ctrlr_write_cmd\n   spdk_bdev_writev_blocks\n\nHere bdev_io is being allocated. Is this changing with zcopy?",
      "revId": "660e3b205b8407d6613e686e249d93d323eaeed5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0dfd04c_0b4106c3",
        "filename": "lib/bdev/bdev.c",
        "patchSetId": 9
      },
      "lineNbr": 1915,
      "author": {
        "id": 1011327
      },
      "writtenOn": "2018-07-10T17:46:20Z",
      "side": 1,
      "message": "The allocated buffer here is a different type and a different structure(bdev_io-\u003eu.zcopy). Didn\u0027t understand how this will be used for bdev_io type of read or write while submitting the actual request.",
      "revId": "660e3b205b8407d6613e686e249d93d323eaeed5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}