{
  "comments": [
    {
      "key": {
        "uuid": "2f0c818b_d8d897d1",
        "filename": "lib/scsi/lun.c",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2017-11-15T05:46:37Z",
      "side": 1,
      "message": "First for a LUN, all related tasks run on the same CPU and is my understanding correct?\nIf correct, if Cunyin\u0027s latest patch (lun_clear_all() is deferred until lun-\u003etasks is made empty.) is applied, lun_clear_all() will surely observe empty lun-\u003etasks.\n\n\nI\u0027ll get back on track.\nI understood that your patch is to assure the following:\n- lun_clear_all() is called first and then spdk_bdev_scsi_task_complete_cmd() is called, CHECK_CONDITION is prioritized.\n- dequeueing any task from lun-\u003etasks is done only in spdk_bdev_scsi_task_complete_cmd() by spdk_scsi_lun_complete_task(). Hence dequeueing always get success.\n\nIs my understanding correct? If so your patch make sense to me.\n\n\nBut in near future if we add timeout into bdev_aio_reset() or bdev_aio_read/write() never return for any reason, we may observe non-empty lun-\u003etasks. For this case we cannot expect the completion of tasks and lun-\u003etasks should be made empty in lun_clear_all() and another feature may be required.\nThis decoupling will improve robustness but increase complexity. I ask this now because enterprise storage support this decoupling.",
      "range": {
        "startLine": 77,
        "startChar": 1,
        "endLine": 82,
        "endChar": 2
      },
      "revId": "b0d17e3d6e5a12c1cb570ccbe1e22a0545f0b2a9",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94184490_c394d16d",
        "filename": "lib/scsi/lun.c",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1011275
      },
      "writtenOn": "2017-11-15T06:12:20Z",
      "side": 1,
      "message": "I would like to say if there is no active tasks, we should remove this loop.\nIf there is, it should use my logic. \u0027Those tasks are already sent to the bdev layer, we should not complete here. it should complete by the call backs.",
      "parentUuid": "2f0c818b_d8d897d1",
      "range": {
        "startLine": 77,
        "startChar": 1,
        "endLine": 82,
        "endChar": 2
      },
      "revId": "b0d17e3d6e5a12c1cb570ccbe1e22a0545f0b2a9",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "708ab184_197b3bfe",
        "filename": "lib/scsi/lun.c",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2017-11-15T06:26:28Z",
      "side": 1,
      "message": "It will be better to validate if there is no active tasks when this function is called.\n\nI think that SCSI is not new and hence ideally any code based only on the assumption should be avoided.",
      "parentUuid": "94184490_c394d16d",
      "range": {
        "startLine": 77,
        "startChar": 1,
        "endLine": 82,
        "endChar": 2
      },
      "revId": "b0d17e3d6e5a12c1cb570ccbe1e22a0545f0b2a9",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87ab1815_d828a415",
        "filename": "lib/scsi/lun.c",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1011275
      },
      "writtenOn": "2017-11-15T07:00:10Z",
      "side": 1,
      "message": "For AIO backend case is that since AIO is asynchronous, our current code(without cunyin\u0027s patch) does not address the outstanding I/O well. Definitely, all active I/Os should be handled. \nSo removing this loop should be a solution and add assert or judge should be a good solution. My code will not do any side effect for our codes, but if it is triggered, which means the backend bdev is not handling the reset in a good way.",
      "parentUuid": "708ab184_197b3bfe",
      "range": {
        "startLine": 77,
        "startChar": 1,
        "endLine": 82,
        "endChar": 2
      },
      "revId": "b0d17e3d6e5a12c1cb570ccbe1e22a0545f0b2a9",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4953fc7f_ebd67267",
        "filename": "lib/scsi/lun.c",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2017-11-15T05:46:37Z",
      "side": 1,
      "message": "First I\u0027m not sure what is the case such that lun-\u003epending_tasks is not empty. I\u0027m glad that if you know it.\n\nAs long as I read the code, any task inserted into lun-\u003epending_tasks is removed from lun-\u003epending_tasks immediately in a context.",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 92,
        "endChar": 2
      },
      "revId": "b0d17e3d6e5a12c1cb570ccbe1e22a0545f0b2a9",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ddfa4df7_f6216fe9",
        "filename": "lib/scsi/lun.c",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1011275
      },
      "writtenOn": "2017-11-15T06:12:20Z",
      "side": 1,
      "message": "Pending tasks are those tasks not send to the bdev layer, so we can safely abort it and return those tasks.",
      "parentUuid": "4953fc7f_ebd67267",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 92,
        "endChar": 2
      },
      "revId": "b0d17e3d6e5a12c1cb570ccbe1e22a0545f0b2a9",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b86826e2_057f336d",
        "filename": "lib/scsi/lun.c",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2017-11-15T06:26:28Z",
      "side": 1,
      "message": "If pending tasks means tasks inserted into the lun-\u003epending_tasks, I cannot find any actual code sequence which produce pending tasks.\n\nMy lack of understanding may cause this question but if you know that I\u0027m happy to know.",
      "parentUuid": "ddfa4df7_f6216fe9",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 92,
        "endChar": 2
      },
      "revId": "b0d17e3d6e5a12c1cb570ccbe1e22a0545f0b2a9",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23bb08c3_3fb6a9dd",
        "filename": "lib/scsi/lun.c",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1011275
      },
      "writtenOn": "2017-11-15T06:37:12Z",
      "side": 1,
      "message": "All the tasks executed in the lun, will firstly be the pending tasks (put in lun-\u003epending_tasks), then execute in (lun-\u003etasks.)",
      "parentUuid": "b86826e2_057f336d",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 92,
        "endChar": 2
      },
      "revId": "b0d17e3d6e5a12c1cb570ccbe1e22a0545f0b2a9",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74811955_4fa30ff5",
        "filename": "lib/scsi/lun.c",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1012251
      },
      "writtenOn": "2017-11-15T06:47:07Z",
      "side": 1,
      "message": "Question 1:\n\nThe following function can run parallel among multiple CPUs?\n\nvoid\nspdk_scsi_dev_queue_task(struct spdk_scsi_dev *dev,\n\t\t\t struct spdk_scsi_task *task)\n{\n\tassert(task !\u003d NULL);\n\n\tif (spdk_scsi_lun_append_task(task-\u003elun, task) \u003d\u003d 0) {\n\t\t/* ready to execute, disk is valid for LUN access */\n\t\tspdk_scsi_lun_execute_tasks(task-\u003elun);\n\t}\n}\n\nQuestion 2:\n\nIf the answer to Q1 is NO,\n\n- spdk_scsi_lun_append_task() always insert a task into lun-\u003ependings and returns 0\n- spdk_scsi_lun_execute_tasks() always dequeues all tasks from lun-\u003ependings unconditionally.\n- I have not found any other place to insert a task into lun-\u003ependings.\n\nHence we will never observe not-empty lun-\u003ependings in any other places.\n\n\nThat\u0027s all what I want to know now.\nThank you.",
      "parentUuid": "23bb08c3_3fb6a9dd",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 92,
        "endChar": 2
      },
      "revId": "b0d17e3d6e5a12c1cb570ccbe1e22a0545f0b2a9",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}